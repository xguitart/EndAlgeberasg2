# In this file we verify the correctness of the tables of Section 5 of the article ENDOMORPHISM ALGEBRAS OF GEOMETRICALLY SPLIT GENUS 2 JACOBIANS OVER Q
x = QQ['x'].gen()
# This is the list of genus two curves, indexed by their geometric endomorphism algebra
list1 = {
'M_2(Q)' : x^6 + x^4 + x^2 + 1,
'QxQ' : x^6 + x^5 + x - 1,
    'QxQ(sqrt{-3})' : x^6 - 15*x^2 + 22,
    'QxQ(sqrt{-4})' : x^6 - 11*x^2 + 14,
    'QxQ(sqrt{-7})' : x^6 - 35*x^2 + 98,
    'QxQ(sqrt{-8})' : x^6 - 30*x^2 + 56,
    'QxQ(sqrt{-11})' :  x^6 - 264*x^2 + 1694,
    'QxQ(sqrt{-19})' :  x^6 -152 * x^2 + 722,
    'QxQ(sqrt{-43})' :  x^6 -3440 * x^2 + 77658,
    'QxQ(sqrt{-67})' : x^6 -29480 * x^2 + 1948226,
    'QxQ(sqrt{-163})' :  x^6 -8697680 *x^2 + 9873093538,
    'Q(sqrt{-3})xQ(sqrt{-4})' : -2*x^6 + 3*x^4 - 3*x^2 + 1,
    'Q(sqrt{-4})xQ(sqrt{-7})' :  21870000*x^6 - 1002375*x^4 + 2025*x^2 - 30,
    'Q(sqrt{-4})xQ(sqrt{-8})' :  -46656*x^6 - 1296*x^4 + 108*x^2 - 1,
    'M_2(Q(sqrt{-3}))' : x^6+1,
    'M_2(Q(sqrt{-4}))' : x^5+x^3+81/196*x,
    'M_2(Q(sqrt{-7}))' : x^5+x^3+3969/16900*x,
    'M_2(Q(sqrt{-8}))'  : x^5-x,
    'M_2(Q(sqrt{-11}))' : 2*x^6+ 11*x^3- 2* 11,
    'M_2(Q(sqrt{-19}))'  : x^6+ 1026*x^5+ 627*x^4+ 38988*x^3-627* 19*x^2+ 1026* 19^2*x-19^3,
    'M_2(Q(sqrt{-43}))'  : x^6+ 48762*x^5+ 1419*x^4+ 4193532*x^3-1419* 43*x^2+ 48762* 43^2*x-43^3,
    'M_2(Q(sqrt{-67}))'  : x^6+ 785106*x^5+ 2211*x^4+ 105204204*x^3-2211* 67*x^2+ 785106* 67^2*x-67^3,
    'M_2(Q(sqrt{-163}))'  : x^6+ 1635420402*x^5+ 5379*x^4+ 533147051052*x^3 -5379* 163*x^2+ 1635420402* 163^2*x-163^3,
    'M_2(Q(sqrt{-15}))' : x^6+x^3+1/20,
    'M_2(Q(sqrt{-20}))' : x^5+ 5*x^3+ 5*x,
    'M_2(Q(sqrt{-24}))' : 3*x^5+ 8*x^3+ 3*2*x,
    'M_2(Q(sqrt{-35}))' : 83*x^6 - 184*x^5 + 405*x^4 + 80*x^3 - 255*x^2 + 136*x + 127, 
    'M_2(Q(sqrt{-40}))'  : 9*x^5+ 40*x^3+ 9*5*x,
    'M_2(Q(sqrt{-51}))' : x^6+x^3+ 4/17,
    'M_2(Q(sqrt{-52}))' : 9*x^5+ 65*x^3+ 9*13*x,
    'M_2(Q(sqrt{-88}))' : 99*x^5+ 280*x^3+ 99*2*x,
    'M_2(Q(sqrt{-91}))' :  8477*x^6 + 11340*x^5 - 30513*x^4 -  15336*x^3 + 42135*x^2 - 11124*x + 1637, 
    'M_2(Q(sqrt{-115}))'  : 2647*x^6 - 5736*x^5 + 7545*x^4 + 1520*x^3 - 4995*x^2 + 4824*x + 3483,   
    'M_2(Q(sqrt{-123}))' : x^6+x^3+256/1025,
    'M_2(Q(sqrt{-148}))'  : 441*x^5+ 5365*x^3+ 441*37*x,
    'M_2(Q(sqrt{-187}))' :  258093*x^6 + 519750*x^5 - 364518*x^4 -  1612000*x^3 + 286356*x^2 + 719000*x + 248616,
    'M_2(Q(sqrt{-232}))'  :  9801*x^5+ 105560*x^3+ 9801*29*x,
    'M_2(Q(sqrt{-235}))' :63847*x^6 - 89256*x^5 - 89655*x^4 -   27280*x^3 + 135405*x^2 + 105624*x + 48843,
    'M_2(Q(sqrt{-267}))' : x^6+x^3+62500/250001,
    'M_2(Q(sqrt{-403}))' : 19149677*x^6 - 28664274*x^5 + 11992662*x^4   - 83358256*x^3 + 76850532*x^2 - 3824904*x + 53478712, 
    'M_2(Q(sqrt{-427}))' : 178773643*x^6 + 67725720*x^5 -  770837595*x^4 - 7030800*x^3 + 871950585*x^2 - 303837480*x + 27419167, 
    'M_2(Q(sqrt{-84}))'  : (2*x^2-6*x-9)*(4*x^4-24*x^3-4*x-3),
    'M_2(Q(sqrt{-120}))' : (2*x^2-2*x-1)*(6*x^2-20*x+25)*(18*x^2+24*x+5),
    'M_2(Q(sqrt{-132}))'  : (x^2 - 2*x - 10)*(121*x^4 + 572*x^3 + 176*x^2 + 40*x + 4),
    'M_2(Q(sqrt{-168}))'  : (2*x^2+26*x-3)*(14*x^2-16*x+1)*(14*x^2+28*x+23),
    'M_2(Q(sqrt{-228}))'  : (x^2+2*x-2)*(15625*x^4+62500*x^3-5832*x+2916),
    'M_2(Q(sqrt{-372}))'  : 1771561*x^6 - 10629366*x^5 + 10629366 * x^4 + 10797488* x^3 + 5062500 * x^2 + 10125000 * x + 3375000,
    'M_2(Q(sqrt{-408}))'  : 350354606 * x^6 - 590700831 * x^5 - 816200091 * x^4 + 1046797684 * x^3 + 824978466 * x^2 - 502917081 *x - 378640481,
    'M_2(Q(sqrt{-435}))'  :  10466471*x^6 + 11098203*x^5 - 95645550*x^4 - 106834905*x^3  + 95572050*x^2 - 49559037*x + 7237649,
    'M_2(Q(sqrt{-520}))'  : (19*x^2+54*x+37)*(319*x^2-444*x+171)*(445083*x^2+396482*x-144363),
    'M_2(Q(sqrt{-532}))'  : (50251*x^2 + 27624*x - 17865)* (29*x^4 - 128*x^3 + 114*x^2 + 160*x - 75),
    'M_2(Q(sqrt{-708}))'  : (6655*x^2 - 3278*x - 1966)* (14225761*x^4 + 9092252*x^3 - 47672800*x^2 + 48112648*x + 6781636),
    'M_2(Q(sqrt{-1012}))'  :  -(x^2 - 1350*x + 2326)*(8385623*x^4 + 15948252*x^3 - 44642960*x^2 - 12762360*x - 1510324),
    'M_2(Q(sqrt{-1435}))'  :  539468307211*x^6 + 8859839654637*x^5 +  71566557542400*x^4  + 152349804189405*x^3 - 44616942974400*x^2 -  3819661212483*x + 1228993875229
    }

P.<r,s,t>=QQ[]
for alg in list1:
    C=HyperellipticCurve(list1[alg])
    print('algebra = ',alg)
    print('C = ',C)
    # we loop looking for (n,n)-isogenies, for 2<= n <= 11
    # these are the igusa invariants provided by Kumar, we extracted them from the files that can be downloaded from the source files in the arxiv version of the article https://arxiv.org/abs/1412.2849 
    for n in range(2,12):
        if n == 2:
            I2 = t^2*8*(3*s + r)/r
            I4 = t^4*(-4*(3*r - 1))
            I6 = t^6*(-4*(6*r*s - 8*s + 5*r^2 - 2*r)/r)
            I10 = t^10* 4*r*s
        elif n == 3:
            I2 = t^2*8*(s^2 + 4*s - 2)
            I4 = t^4*4*(s^4 - 4*s^3 + 6*s^2 - 48*r*s - 4*s + 192*r + 1)
            I6 = t^6*8*(s^6 + 2*s^5 - 21*s^4 - 40*r*s^3 + 44*s^3 + 144*r*s^2 - 41*s^2 + 792*r*s + 18*s - 288*r^2 - 320*r - 3)
            I10 = t^10*2^(14)*r^3
        elif n == 4:
            I2 = t^2*2*(3*s^6 - 12*r*s^5 + 13*r^2*s^4 + 18*r*s^4 - 2*r^3*s^3 - 48*r^2*s^3 + 28*r^3*s^2+ 36*r^2*s^2 + 2*r^4*s - 48*r^3*s + 4*r^4 + 24*r^3)/ (r^2*(s^2 - 2*r*s + 2*r)) 
            I4 = t^4*(s^4 + 24*s^3 + 4*r*s^2 + 48*r*s + r^2 )/4
            I6 = t^6*(8*s^(10) - 32*r+s^9 + 192*s^9 + 34*r^2*s^8 - 688*r*s^8 - 4*r^3*s^7 + 624*r^2*s^7 + 1536*r*s^7
            - 16*r^3*s^6 - 4294*r^2*s^6 - 8*r^4*s^5 + 3000*r^3*s^5 + 4608*r^2*s^5 - 109*r^4*s^4- 8612*r^3*s^4 + 26*r^5*s^3 + 3488*r^4 *s^3 + 6144*r^3 *s^3 + 124*r^5 *s^2 - 5576*r^4*s^2+ 4*r^6*s + 480*r^5*s + 3072*r^4*s + 12*r^6 + 208*r^5 )/ (16*r^2 *(s^2 - 2*r*s + 2*r)) 
            I10 = t^10*r^2*(s^2 + 2*r)*(s^2 - 2*r*s + 2*r)/256
        elif n == 5:
            A1 = -4
            A = -(16*r^4*s^4-32*r^3*s^4+24*r^2*s^4-8*r*s^4+s^4+96*r^4*s^3-976*r^3*s^3 +904*r^2*s^3-220*r*s^3+56*r^4*s^2-392*r^3*s^2+198*r^2*s^2-24*r^4*s +20*r^3*s+r^4)/48
            B1 =   (4*r^2*s^2+20*r*s^2+s^2-12*r^2*s+22*r*s-6*s+r^2-6*r+3)/3;
            B =  (64*r^6*s^6-192*r^5*s^6+240*r^4*s^6-160*r^3*s^6+60*r^2*s^6-12*r*s^6+s^6+576*r^6*s^5+7392*r^5*s^5-16224*r^4*s^5+12528*r^3*s^5-4236*r^2*s^5 +534*r*s^5+1200*r^6*s^4+22080*r^5*s^4-52872*r^4*s^4+35712*r^3*s^4-7473*r^2*s^4-2640*r^5*s^3+5808*r^4*s^3-2180*r^3*s^3+300*r^6*s^2 +780*r^5*s^2-417*r^4*s^2-36*r^6*s+30*r^5*s+r^6)/864 
            B2 = -r^7*(2*r-1)^2*s^5 
            I2=t^2*(-24*B1/A1); I4= t^4*(-12*A); I6= t^6*(96*(A/A1)*B1-36*B); I10= t^10*(-4*A1*B2)
        elif n == 6:
            A1 = 6*(36*s-r^2)
            A = -3*(r+6)^2*(144*r^2*s^4+1728*r*s^4+5184*s^4+5472*r^3*s^3+34560*r^2*s^3+10368*r*s^3 +3672*r^4*s^2+19296*r^3*s^2+4320*r^2*s^2+600*r^5*s+2496*r^4*s +288*r^3*s+25*r^6+60*r^5+36*r^4)
            B1 = -2*(3888*r^2*s^3-233280*r*s^3+139968*s^3-1404*r^4*s^2-12960*r^3*s^2 -190512*r^2*s^2-139968*r*s^2+72*r^6*s+972*r^5*s+6156*r^4*s -7776*r^3*s-11664*r^2*s-r^8-18*r^7-135*r^6-324*r^5-972*r^4)/3
            B  = 18*(r+6)^4 *(192*r^2*s^6+2304*r*s^6+6912*s^6-16704*r^3*s^5-96768*r^2*s^5+20736*r*s^5 -59184*r^4*s^4-144576*r^3*s^4+19008*r^2*s^4-27744*r^5*s^3-54912*r^4*s^3+5760*r^3*s^3-5676*r^6*s^2-9360*r^5*s^2 +720*r^4*s^2-564*r^7*s-576*r^6*s-48*r^5*s-21*r^8+12*r^7-4*r^6)
            B2 = 6144*r^7*(r+6)^6*(6*s+r)^3
            I2, I4, I6, I10 = [t^2*(-24*B1/A1),t^4*( -12*A),t^6*( 96*(A/A1)*B1-36*B), t^10*(-4*A1*B2)]
        elif n == 7:
            A1 = -(r*s-1)^2/16
            A = -(144*r^4*s^6+912*r^4*s^5-96*r^3*s^5-24*r^2*s^5+2320*r^4*s^4-856*r^3*s^4 -88*r^2*s^4+16*r*s^4+s^4+2720*r^4*s^3-1872*r^3*s^3+128*r^2*s^3 +20*r*s^3+1400*r^4*s^2-1336*r^3*s^2+198*r^2*s^2+232*r^4*s-220*r^3*s+r^4)/48
            B1 = (12*r^6*s^6+24*r^6*s^5-48*r^5*s^5+12*r^4*s^5+12*r^6*s^4-84*r^5*s^4+92*r^4*s^4 -28*r^3*s^4+r^2*s^4-36*r^5*s^3+116*r^4*s^3-90*r^3*s^3+44*r^2*s^3 -2*r*s^3+37*r^4*s^2-76*r^3*s^2+84*r^2*s^2-40*r*s^2+s^2-14*r^3*s  +32*r^2*s-50*r*s+12*s+r^2-12*r+12)/192
            B = -(12960*r^6*s^8-2592*r^5*s^8+432*r^4*s^8+72000*r^6*s^7-35280*r^5*s^7  +6552*r^4*s^7-432*r^3*s^7+36*r^2*s^7+166888*r^6*s^6 -122208*r^5*s^6+28368*r^4*s^6-3956*r^3*s^6+36*r^2*s^6-24*r*s^6 -s^6+209352*r^6*s^5-195360*r^5*s^5+48348*r^4*s^5-5952*r^3*s^5 +432*r^2*s^5-30*r*s^5+153360*r^6*s^4-170892*r^5*s^4 +41568*r^4*s^4-228*r^3*s^4+417*r^2*s^4+64480*r^6*s^3 -84720*r^5*s^3+22956*r^4*s^3+2180*r^3*s^3+13140*r^6*s^2 -20196*r^5*s^2+7473*r^4*s^2+516*r^6*s-534*r^5*s-r^6)/864
            B2 = 16*r^5*s^7*(s+1)^4*(r*s+r-1)
            I2, I4, I6, I10 = [t^2*(-24*B1/A1), t^4*(-12*A), t^6*(96*(A/A1)*B1-36*B), t^10*(-4*A1*B2)]
        elif n == 8:
            A1 = -64*(s-2)^2*s^7*(s+2*r)^8*(s^2+4*r)^2*(s^2+2*s+4*r)*(s^3+2*s^2+12*r*s+8*r^2)
            A = -4*(49*s^10+264*r*s^9+224*s^9+520*r^2*s^8+1224*r*s^8+256*s^8+480*r^3*s^7 +2624*r^2*s^7+1536*r*s^7+208*r^4*s^6+2880*r^3*s^6+3280*r^2*s^6 +1696*r^4*s^5+2688*r^3*s^5+384*r^5*s^4-128*r^6*s^3-1152*r^5*s^3 -512*r^6*s^2+64*r^8)/3
            B1 =  64*s^7*(s+2*r)^8*(s^2+2*s+4*r)*(3*s^15-2*s^14+84*r*s^13+20*s^13+32*r^2*s^12+80*r*s^12+120*s^12 +1248*r^2*s^11+784*r*s^11+112*s^11+1024*r^3*s^10+1984*r^2*s^10 +3072*r*s^10-160*s^10+272*r^4*s^9+9600*r^3*s^9+14464*r^2*s^9 -448*r*s^9-192*s^9+9312*r^4*s^8+29952*r^3*s^8+16128*r^2*s^8 -4352*r*s^8+384*s^8+3136*r^5*s^7+58304*r^4*s^7+80896*r^3*s^7 -28928*r^2*s^7+5376*r*s^7+128*r^6*s^6+51200*r^5*s^6+157824*r^4*s^6 -55296*r^3*s^6+28160*r^2*s^6+17664*r^6*s^5+209152*r^5*s^5 +5120*r^4*s^5+70656*r^3*s^5+1024*r^7*s^4+153600*r^6*s^4  +119808*r^5*s^4+116736*r^4*s^4+48128*r^7*s^3+189440*r^6*s^3 +159744*r^5*s^3+2048*r^8*s^2+139264*r^7*s^2+141312*r^6*s^2  +40960*r^8*s+61440*r^7*s+8192*r^8) /3
            B  = -8*(27*s^16+216*r*s^15+578*s^15+648*r^2*s^14+4032*r*s^14+4272*s^14 +864*r^3*s^13+9408*r^2*s^13+32328*r*s^13+10752*s^13+432*r^4*s^12 +5184*r^3*s^12+96048*r^2*s^12+91008*r*s^12+8624*s^12-10848*r^4*s^11 +132192*r^3*s^11+323136*r^2*s^11+80640*r*s^11-16128*r^5*s^10 +56328*r^4*s^10+628992*r^3*s^10+316416*r^2*s^10-5888*r^6*s^9 -55872*r^5*s^9+739200*r^4*s^9+684288*r^3*s^9-58176*r^6*s^8 +558144*r^5*s^8+915456*r^4*s^8-2304*r^7*s^7+324096*r^6*s^7  +829440*r^5*s^7+7296*r^8*s^6+216576*r^7*s^6+552064*r^6*s^6 +140544*r^8*s^5+267264*r^7*s^5+46080*r^9*s^4+86016*r^8*s^4 +3072*r^10*s^3+27648*r^9*s^3+12288*r^10*s^2-1024*r^12)/27
            B2 =  1/4
            I2, I4, I6, I10 = [t^2*(-24*B1/A1), t^4*(-12*A),t^6*( 96*(A/A1)*B1-36*B), t^10*(-4*A1*B2)]
        elif n == 9:
            # print('(9,9)')
            A1 = -64*r^2*(s+4*r+1)^2*(2*r*s^2-s^2-4*r*s-2*s+2*r-1)^2
            A = -(16*r^4*s^12+32*r^3*s^12+24*r^2*s^12+8*r*s^12+s^12-192*r^4*s^11-3840*r^3*s^11 -3744*r^2*s^11-960*r*s^11-12*s^11+288*r^4*s^10+5952*r^3*s^10  +14832*r^2*s^10+6672*r*s^10+930*s^10+576*r^4*s^9-15648*r^2*s^9  -16512*r*s^9-2076*s^9+1008*r^4*s^8+31968*r^3*s^8+36648*r^2*s^8  +12024*r*s^8+7119*s^8+5760*r^4*s^7+75264*r^3*s^7-39744*r^2*s^7  -62592*r*s^7+1512*s^7+13248*r^4*s^6-67200*r^3*s^6-169440*r^2*s^6 -69408*r*s^6+31836*s^6+42624*r^4*s^5+267264*r^3*s^5  +112320*r^2*s^5-4608*r*s^5+74088*s^5+12528*r^4*s^4-504864*r^3*s^4 -809496*r^2*s^4-330120*r*s^4+108207*s^4-5568*r^4*s^3  +192768*r^3*s^3+467424*r^2*s^3+353856*r*s^3+301092*s^3  +27936*r^4*s^2+21312*r^3*s^2-526608*r^2*s^2-208368*r*s^2  +275490*s^2-43200*r^4*s-728064*r^3*s-766368*r^2*s+369792*r*s +442548*s+10512*r^4+447264*r^3+1306584*r^2+1260936*r+397665)/768
            B1 = 4*(16*r^6*s^12+40*r^4*s^12+r^2*s^12-640*r^7*s^11+640*r^6*s^11+640*r^5*s^11 -160*r^4*s^11+24*r^3*s^11+48*r^2*s^11-12*r*s^11+256*r^8*s^10  +2688*r^7*s^10+6304*r^6*s^10-4096*r^5*s^10-192*r^4*s^10  +1256*r^3*s^10-6*r^2*s^10-156*r*s^10+12*s^10-2560*r^8*s^9  +4224*r^7*s^9-16512*r^6*s^9-5888*r^5*s^9+12224*r^4*s^9 +2792*r^3*s^9-2608*r^2*s^9-468*r*s^9+120*s^9+17664*r^8*s^8 -16512*r^7*s^8+19440*r^6*s^8+37248*r^5*s^8+26568*r^4*s^8 -18216*r^3*s^8-9393*r^2*s^8+540*r*s^8+540*s^8-59392*r^8*s^7 +24320*r^7*s^7+50432*r^6*s^7+39680*r^5*s^7-65728*r^4*s^7  -63760*r^3*s^7-4896*r^2*s^7+6408*r*s^7+1440*s^7+119296*r^8*s^6+78080*r^7*s^6+51392*r^6*s^6-220672*r^5*s^6-169408*r^4*s^6 -33520*r^3*s^6+34540*r^2*s^6+17640*r*s^6+2520*s^6-150528*r^8*s^5  -108288*r^7*s^5-417024*r^6*s^5-221184*r^5*s^5+27648*r^4*s^5  +115920*r^3*s^5+89760*r^2*s^5+26712*r*s^5+3024*s^5+90624*r^8*s^4 -112896*r^7*s^4+192240*r^6*s^4+241920*r^5*s^4+299448*r^4*s^4  +214704*r^3*s^4+104847*r^2*s^4+25272*r*s^4+2520*s^4  +30720*r^8*s^3+392064*r^7*s^3+90240*r^6*s^3+196224*r^5*s^3 +253536*r^4*s^3+152952*r^3*s^3+68592*r^2*s^3+15300*r*s^3 +1440*s^3-86784*r^8*s^2-545664*r^7*s^2-222048*r^6*s^2  +66048*r^5*s^2+98688*r^4*s^2+49032*r^3*s^2+25338*r^2*s^2 +5748*r*s^2+540*s^2+50688*r^8*s+343680*r^7*s+292224*r^6*s +154368*r^5*s+42816*r^4*s+5064*r^3*s+4752*r^2*s+1212*r*s+120*s -9984*r^8-61056*r^7+18192*r^6+43392*r^5+15192*r^4-264*r^3 +321*r^2+108*r+12)/3
            B = (64*r^6*s^18+192*r^5*s^18+240*r^4*s^18+160*r^3*s^18+60*r^2*s^18+12*r*s^18+s^18   -1152*r^6*s^17+31104*r^5*s^17+64800*r^4*s^17+48960*r^3*s^17   +16200*r^2*s^17+1944*r*s^17-18*s^17+5184*r^6*s^16-214848*r^5*s^16  -926352*r^4*s^16-869472*r^3*s^16-291780*r^2*s^16-34740*r*s^16  -2007*s^16-13824*r^5*s^15+578304*r^4*s^15+2469888*r^3*s^15   +1845504*r^2*s^15+410976*r*s^15+16272*s^15-6912*r^6*s^14  -670464*r^5*s^14-4781376*r^4*s^14-4219776*r^3*s^14  -2525904*r^2*s^14-1128816*r*s^14-168588*s^14+13824*r^6*s^13 -1290240*r^5*s^13-2710656*r^4*s^13+13457664*r^3*s^13   +11104416*r^2*s^13+1955520*r*s^13+95688*s^13-34560*r^6*s^12 -292608*r^5*s^12-10543680*r^4*s^12+12751488*r^3*s^12  -2888208*r^2*s^12-7768368*r*s^12-1083708*s^12+276480*r^6*s^11  +8944128*r^5*s^11+12434688*r^4*s^11+64336896*r^3*s^11   +5961600*r^2*s^11-7920288*r*s^11+126576*s^11+2560896*r^6*s^10-29960064*r^5*s^10-115448544*r^4*s^10+14807232*r^3*s^10 -57488184*r^2*s^10-26176824*r*s^10+97902*s^10+2914560*r^6*s^9  +8328960*r^5*s^9+221932224*r^4*s^9+398715264*r^3*s^9 -34060176*r^2*s^9-19384272*r*s^9+4317012*s^9+3805056*r^6*s^8   -60953472*r^5*s^8-155316960*r^4*s^8-266455872*r^3*s^8  -527613048*r^2*s^8-47754360*r*s^8+8531406*s^8+8957952*r^6*s^7  -86413824*r^5*s^7+370144512*r^4*s^7+419198976*r^3*s^7    -136498176*r^2*s^7+202448160*r*s^7+21377520*s^7+3062016*r^6*s^6 +216698112*r^5*s^6+669339072*r^4*s^6-433607040*r^3*s^6 -767634192*r^2*s^6+187257744*r*s^6-20160252*s^6+4603392*r^6*s^5   -158671872*r^5*s^5-894063744*r^4*s^5-1821014784*r^3*s^5   -392944608*r^2*s^5+579094272*r*s^5-53337528*s^5-5204736*r^6*s^4   +242604288*r^5*s^4+710859456*r^4*s^4+823478400*r^3*s^4   +1542651696*r^2*s^4+778594896*r*s^4-183950028*s^4-11446272*r^6*s^3     -116716032*r^5*s^3-1204229376*r^4*s^3-1470790656*r^3*s^3     +25978752*r^2*s^3-128297952*r*s^3-374767344*s^3+11161152*r^6*s^2    -299412288*r^5*s^2-362331792*r^4*s^2+1256801184*r^3*s^2   +1657555164*r^2*s^2-42398964*r*s^2-374154471*s^2-5318784*r^6*s +270304128*r^5*s+1439226144*r^4*s+1902844224*r^3*s+183576456*r^2*s  -982202760*r*s-420042834*s+1429056*r^6-92964672*r^5-724558608*r^4-1851476832*r^3-2161056996*r^2-1191339252*r-251062767)/55296
            B2 = -(s+1)^9*(r*s-r-1)^3*(s^2+3)^3/32
            I2, I4, I6, I10 =[t^2*(-24*B1/A1), t^4*(-12*A), t^6*( 96*(A/A1)*B1-36*B), t^10*(-4*A1*B2)]
        elif n == 10:
            A1 = -s^10*(s+2)^2*(s-r)^5*(s+r)^2*(s+r+2)*(s^2+2*s-r^2)^2*(s^2+r*s+2*s-r^2)^2  *(2*s^2+2*s-r^2)
            A = (5*s^12+30*s^11-49*r^2*s^10-52*r*s^10+6*s^10-30*r^3*s^9-320*r^2*s^9-180*r*s^9   -180*s^9+87*r^4*s^8+4*r^3*s^8-560*r^2*s^8+24*r*s^8-225*s^8+90*r^5*s^7   +648*r^4*s^7+252*r^3*s^7-300*r^2*s^7+360*r*s^7-19*r^6*s^6+380*r^5*s^6       +1600*r^4*s^6+64*r^3*s^6-156*r^2*s^6-60*r^7*s^5-282*r^6*s^5+580*r^5*s^5       +1948*r^4*s^5-360*r^3*s^5-25*r^8*s^4-336*r^7*s^4-1048*r^6*s^4       +264*r^5*s^4+1322*r^4*s^4-80*r^8*s^3-668*r^7*s^3-1596*r^6*s^3       -232*r^5*s^3-6*r^8*s^2-368*r^7*s^2-956*r^6*s^2+112*r^8*s+232*r^7*s-r^8) /48
            B1 =  s^10*(s+2)^2*(s-r)^5*(s+r)^2*(s+r+2)    *(5*s^16+10*r*s^15+60*s^15+3*r^2*s^14+134*r*s^14+358*s^14-18*r^3*s^13            +46*r^2*s^13+948*r*s^13+1474*s^13-79*r^4*s^12-338*r^3*s^12            +237*r^2*s^12+4228*r*s^12+4512*s^12-48*r^5*s^11-844*r^4*s^11            -2746*r^3*s^11+14*r^2*s^11+11944*r*s^11+9872*s^11+197*r^6*s^10            +46*r^5*s^10-3665*r^4*s^10-11888*r^3*s^10-3736*r^2*s^10            +20976*r*s^10+14496*s^10+180*r^7*s^9+1856*r^6*s^9+2842*r^5*s^9            -7310*r^4*s^9-29032*r^3*s^9-13400*r^2*s^9+22048*r*s^9+13344*s^9            -238*r^8*s^8+586*r^7*s^8+6573*r^6*s^8+13456*r^5*s^8-3948*r^4*s^8            -39840*r^3*s^8-20944*r^2*s^8+12672*r*s^8+6912*s^8-228*r^9*s^7            -1930*r^8*s^7-1344*r^7*s^7+10040*r^6*s^7+27224*r^5*s^7            +8368*r^4*s^7-28544*r^3*s^7-15680*r^2*s^7+3072*r*s^7+1536*s^7            +173*r^10*s^6-662*r^9*s^6-5180*r^8*s^6-8056*r^7*s^6+4008*r^6*s^6            +25744*r^5*s^6+13632*r^4*s^6-8320*r^3*s^6-4608*r^2*s^6            +144*r^11*s^5+1120*r^10*s^5+484*r^9*s^5-5046*r^8*s^5-11752*r^7*s^5            -4920*r^6*s^5+9312*r^5*s^5+5792*r^4*s^5-81*r^12*s^4+262*r^11*s^4            +1991*r^10*s^4+2764*r^9*s^4-204*r^8*s^4-5600*r^7*s^4-3920*r^6*s^4            -46*r^13*s^3-358*r^12*s^3-254*r^11*s^3+834*r^10*s^3+2000*r^9*s^3            +1520*r^8*s^3+23*r^14*s^2-22*r^13*s^2-309*r^12*s^2-456*r^11*s^2            -328*r^10*s^2+6*r^15*s+50*r^14*s+70*r^13*s+34*r^12*s-3*r^16-6*r^15            -r^14) /12
            B = -(70*s^18+630*s^17-219*r^2*s^16-12*r*s^16+2556*s^16-252*r^3*s^15-2382*r^2*s^15         +828*r*s^15+6966*s^15-381*r^4*s^14-3972*r^3*s^14-15399*r^2*s^14         +3996*r*s^14+14310*s^14+630*r^5*s^13-966*r^4*s^13-22890*r^3*s^13         -63288*r^2*s^13+540*r*s^13+18468*s^13+2444*r^6*s^12+14220*r^5*s^12         +26577*r^4*s^12-47764*r^3*s^12-140580*r^2*s^12-18792*r*s^12         +10206*s^12+378*r^7*s^11+18318*r^6*s^11+84234*r^5*s^11         +175986*r^4*s^11+4068*r^3*s^11-143532*r^2*s^11-21384*r*s^11         -3153*r^8*s^10-11424*r^7*s^10+17226*r^6*s^10+177984*r^5*s^10         +410202*r^4*s^10+118224*r^3*s^10-46980*r^2*s^10-1764*r^9*s^9         -27546*r^8*s^9-94554*r^7*s^9-159854*r^6*s^9+52392*r^5*s^9         +384768*r^4*s^9+93528*r^3*s^9+1041*r^10*s^8-5412*r^9*s^8         -68421*r^8*s^8-223284*r^7*s^8-467400*r^6*s^8-228576*r^5*s^8         +104850*r^4*s^8+1008*r^11*s^7+10842*r^10*s^7+17214*r^9*s^7         -696*r^8*s^7-113016*r^7*s^7-416448*r^6*s^7-176400*r^5*s^7         +196*r^12*s^6+6588*r^11*s^6+34203*r^10*s^6+69228*r^9*s^6         +177138*r^8*s^6+180672*r^7*s^6-87352*r^6*s^6+1092*r^12*s^5         +15096*r^11*s^5+34998*r^10*s^5+30300*r^9*s^5+147468*r^8*s^5         +150384*r^7*s^5+3210*r^12*s^4+19680*r^11*s^4+2076*r^10*s^4         -71256*r^9*s^4-4878*r^8*s^4+5728*r^12*s^3+25524*r^11*s^3         +9612*r^10*s^3-45224*r^9*s^3+3966*r^12*s^2+19536*r^11*s^2         +24156*r^10*s^2-528*r^12*s-1032*r^11*s-2*r^12)/1728
            B2 = 1/1024
            I2, I4, I6, I10 = [-24*B1/A1*t^2, -12*A*t^4, (96*(A/A1)*B1-36*B)*t^6, -4*A1*B2*t^10]
        if n == 11:
            # print('(11,11)')
            A1 =  -4*(s-r-1)^2*(r*s+s-r)^2*(r^2*s+r*s-s-r^2+1)^2*(s^2-r^2*s-r*s-s+r^2)^2  *(r*s^2+2*s^2-r^2*s-3*r*s-2*s+r^2+r)^2
            A =   -r^2*(s-1)^2    *(r^6*s^10+12*r^5*s^10+38*r^4*s^10+44*r^3*s^10+193*r^2*s^10+32*r*s^10              +256*s^10-4*r^7*s^9-42*r^6*s^9-172*r^5*s^9-488*r^4*s^9              -920*r^3*s^9-1342*r^2*s^9-2472*r*s^9-1856*s^9+6*r^8*s^8              +60*r^7*s^8+269*r^6*s^8+928*r^5*s^8+2350*r^4*s^8+5512*r^3*s^8              +11875*r^2*s^8+13640*r*s^8+5312*s^8-4*r^9*s^7-48*r^8*s^7              -212*r^7*s^7-536*r^6*s^7-1824*r^5*s^7-8108*r^4*s^7-25132*r^3*s^7              -40712*r^2*s^7-30264*r*s^7-7808*s^7+r^10*s^6+24*r^9*s^6              +130*r^8*s^6-80*r^7*s^6-1791*r^6*s^6-1492*r^5*s^6+15476*r^4*s^6              +49616*r^3*s^6+61213*r^2*s^6+33216*r*s^6+6272*s^6-6*r^10*s^5              -68*r^9*s^5+32*r^8*s^5+2992*r^7*s^5+13154*r^6*s^5+20600*r^5*s^5              +580*r^4*s^5-35216*r^3*s^5-40670*r^2*s^5-17832*r*s^5-2624*s^5              +15*r^10*s^4+120*r^9*s^4-650*r^8*s^4-8428*r^7*s^4-29847*r^6*s^4              -48880*r^5*s^4-37378*r^4*s^4-7604*r^3*s^4+5877*r^2*s^4              +3256*r*s^4+448*s^4-20*r^10*s^3-140*r^9*s^3+1024*r^8*s^3              +10108*r^7*s^3+31908*r^6*s^3+50856*r^5*s^3+45088*r^4*s^3              +22312*r^3*s^3+5784*r^2*s^3+648*r*s^3+15*r^10*s^2+104*r^9*s^2              -602*r^8*s^2-5560*r^7*s^2-16206*r^6*s^2-24288*r^5*s^2              -20658*r^4*s^2-9920*r^3*s^2-2437*r^2*s^2-224*r*s^2-6*r^10*s              -44*r^9*s+80*r^8*s+1068*r^7*s+3020*r^6*s+4204*r^5*s+3216*r^4*s              +1300*r^3*s+218*r^2*s+r^10+8*r^9+28*r^8+56*r^7+70*r^6+56*r^5              +28*r^4+8*r^3+r^2)/48
            B1 = (s-r-1)^2*(r^12*s^18+2*r^11*s^18-35*r^10*s^18-210*r^9*s^18-492*r^8*s^18                    -510*r^7*s^18-23*r^6*s^18+626*r^5*s^18+1033*r^4*s^18                    +940*r^3*s^18+380*r^2*s^18+16*r*s^18+12*s^18-2*r^14*s^17                    -22*r^13*s^17-80*r^12*s^17+96*r^11*s^17+1700*r^10*s^17                    +5794*r^9*s^17+9086*r^8*s^17+4236*r^7*s^17-9058*r^6*s^17                    -19924*r^5*s^17-20206*r^4*s^17-12348*r^3*s^17                    -3832*r^2*s^17-296*r*s^17-120*s^17+r^16*s^16+24*r^15*s^16                    +216*r^14*s^16+902*r^13*s^16+1250*r^12*s^16-4852*r^11*s^16                    -27667*r^10*s^16-58418*r^9*s^16-47834*r^8*s^16                   +43012*r^7*s^16+159765*r^6*s^16+200880*r^5*s^16                    +148717*r^4*s^16+69628*r^3*s^16+18280*r^2*s^16+1992*r*s^16                    +540*s^16-4*r^17*s^15-82*r^16*s^15-728*r^15*s^15                    -3448*r^14*s^15-7844*r^13*s^15+2258*r^12*s^15                    +67914*r^11*s^15+193648*r^10*s^15+222614*r^9*s^15                    -92726*r^8*s^15-700320*r^7*s^15-1124326*r^6*s^15                    -1022176*r^5*s^15-597236*r^4*s^15-229888*r^3*s^15                    -54456*r^2*s^15-7248*r*s^15-1440*s^15+6*r^18*s^14                    +122*r^17*s^14+1128*r^16*s^14+5896*r^15*s^14                    +16874*r^14*s^14+12120*r^13*s^14-92769*r^12*s^14                    -365462*r^11*s^14-535754*r^10*s^14+129412*r^9*s^14                    +1981831*r^8*s^14+3950420*r^7*s^14+4395649*r^6*s^14                    +3148432*r^5*s^14+1519424*r^4*s^14+503420*r^3*s^14                    +112084*r^2*s^14+16512*r*s^14+2520*s^14-4*r^19*s^13                    -84*r^18*s^13-792*r^17*s^13-4258*r^16*s^13-12800*r^15*s^13                    -8948*r^14*s^13+95040*r^13*s^13+414938*r^12*s^13                    +663406*r^11*s^13-400838*r^10*s^13-4136918*r^9*s^13                    -9490114*r^8*s^13-12585590*r^7*s^13-10914908*r^6*s^13                    -6433390*r^5*s^13-2640556*r^4*s^13-777712*r^3*s^13                    -166256*r^2*s^13-25200*r*s^13-3024*s^13+r^20*s^12                    +22*r^19*s^12+103*r^18*s^12-504*r^17*s^12-8046*r^16*s^12                    -45418*r^15*s^12-159073*r^14*s^12-359938*r^13*s^12                    -290229*r^12*s^12+1454930*r^11*s^12+7111109*r^10*s^12                    +16767298*r^9*s^12+25295088*r^8*s^12+25960536*r^7*s^12                    +18451249*r^6*s^12+9166890*r^5*s^12+3260698*r^4*s^12                    +873212*r^3*s^12+180208*r^2*s^12+26544*r*s^12+2520*s^12                    +148*r^19*s^11+2854*r^18*s^11+23424*r^17*s^11                    +108172*r^16*s^11+299682*r^15*s^11+438920*r^14*s^11                    -165230*r^13*s^11-3019622*r^12*s^11-10332664*r^11*s^11                    -23157546*r^10*s^11-37448556*r^9*s^11-43921798*r^8*s^11                    -36949416*r^7*s^11-22044658*r^6*s^11-9334712*r^5*s^11                    -2908324*r^4*s^11-718972*r^3*s^11-142256*r^2*s^11                    -19392*r*s^11-1440*s^11-54*r^20*s^10-1684*r^19*s^10                    -18802*r^18*s^10-108810*r^17*s^10-361695*r^16*s^10                    -627404*r^15*s^10+49891*r^14*s^10+3570994*r^13*s^10                    +11906563*r^12*s^10+25768286*r^11*s^10+42627286*r^10*s^10                    +54705088*r^9*s^10+52979878*r^8*s^10+37476650*r^7*s^10                    +18913773*r^6*s^10+6823090*r^5*s^10+1868922*r^4*s^10                    +430808*r^3*s^10+80356*r^2*s^10+9648*r*s^10+540*s^10                    +320*r^20*s^9+6840*r^19*s^9+58166*r^18*s^9+260080*r^17*s^9                    +620826*r^16*s^9+405988*r^15*s^9-2396174*r^14*s^9                    -10017688*r^13*s^9-22779084*r^12*s^9-38367692*r^11*s^9                    -51816246*r^10*s^9-55741726*r^9*s^9-45758988*r^8*s^9                    -27398654*r^7*s^9-11609850*r^6*s^9-3519398*r^5*s^9                    -846384*r^4*s^9-183560*r^3*s^9-31384*r^2*s^9-3112*r*s^9                    -120*s^9-945*r^20*s^8-15942*r^19*s^8-108669*r^18*s^8                    -374880*r^17*s^8-548117*r^16*s^8+749288*r^15*s^8                    +5745716*r^14*s^8+15290828*r^13*s^8+27327788*r^12*s^8                    +38280130*r^11*s^8+44100904*r^10*s^8+40770516*r^9*s^8                    +28550214*r^8*s^8+14314144*r^7*s^8+4956614*r^6*s^8                    +1221200*r^5*s^8+257808*r^4*s^8+53432*r^3*s^8+7976*r^2*s^8                    +584*r*s^8+12*s^8+1728*r^20*s^7+23976*r^19*s^7                    +131772*r^18*s^7+330156*r^17*s^7+79542*r^16*s^7                    -2068700*r^15*s^7-7374460*r^14*s^7-14973966*r^13*s^7                    -22221554*r^12*s^7-26811720*r^11*s^7-26953764*r^10*s^7                    -21546118*r^9*s^7-12713968*r^8*s^7-5160540*r^7*s^7                    -1371218*r^6*s^7-254786*r^5*s^7-48652*r^4*s^7                    -10004*r^3*s^7-1176*r^2*s^7-48*r*s^7-2100*r^20*s^6                    -24216*r^19*s^6-104790*r^18*s^6-154538*r^17*s^6                    +380354*r^16*s^6+2396048*r^15*s^6+6019848*r^14*s^6                    +9948350*r^13*s^6+12655773*r^12*s^6+13440614*r^11*s^6                    +11869561*r^10*s^6+8099714*r^9*s^6+3884521*r^8*s^6                    +1182064*r^7*s^6+202992*r^6*s^6+22132*r^5*s^6+5037*r^4*s^6                    +1104*r^3*s^6+76*r^2*s^6+1728*r^20*s^5+16428*r^19*s^5                    +52152*r^18*s^5+1624*r^17*s^5-474254*r^16*s^5                    -1670240*r^15*s^5-3288644*r^14*s^5-4579422*r^13*s^5                    -5105174*r^12*s^5-4814526*r^11*s^5-3688948*r^10*s^5                    -2070844*r^9*s^5-746134*r^8*s^5-137084*r^7*s^5                    -3128*r^6*s^5+1416*r^5*s^5-306*r^4*s^5-60*r^3*s^5                    -945*r^20*s^4-7190*r^19*s^4-13347*r^18*s^4+45288*r^17*s^4                    +293516*r^16*s^4+752166*r^15*s^4+1217455*r^14*s^4                    +1462456*r^13*s^4+1445112*r^12*s^4+1197506*r^11*s^4                    +766565*r^10*s^4+328038*r^9*s^4+72265*r^8*s^4-484*r^7*s^4                    -3140*r^6*s^4-274*r^5*s^4+25*r^4*s^4+320*r^20*s^3                    +1796*r^19*s^3-322*r^18*s^3-28488*r^17*s^3-108320*r^16*s^3                    -220478*r^15*s^3-302148*r^14*s^3-317160*r^13*s^3                    -275266*r^12*s^3-192706*r^11*s^3-95608*r^10*s^3                    -26134*r^9*s^3-474*r^8*s^3+1624*r^7*s^3+266*r^6*s^3                    -6*r^5*s^3-54*r^20*s^2-148*r^19*s^2+1250*r^18*s^2                    +8538*r^17*s^2+24069*r^16*s^2+40868*r^15*s^2                    +48235*r^14*s^2+43744*r^13*s^2+31846*r^12*s^2                    +17384*r^11*s^2+5738*r^10*s^2+422*r^9*s^2-365*r^8*s^2                    -88*r^7*s^2+r^6*s^2-32*r^19*s-314*r^18*s-1296*r^17*s                    -3002*r^16*s-4404*r^15*s-4424*r^14*s-3244*r^13*s                    -1776*r^12*s-652*r^11*s-94*r^10*s+28*r^9*s+10*r^8*s+r^20                    +6*r^19+25*r^18+80*r^17+166*r^16+212*r^15+166*r^14+80*r^13                    +25*r^12+6*r^11+r^10)/3
            B =  r^2*(s-1)^4   *(r^10*s^14+18*r^9*s^14+111*r^8*s^14+300*r^7*s^14-177*r^6*s^14              -2478*r^5*s^14-3839*r^4*s^14+3792*r^3*s^14-5280*r^2*s^14              -6272*r*s^14-1728*s^14-6*r^11*s^13-98*r^10*s^13-624*r^9*s^13              -1464*r^8*s^13+1902*r^7*s^13+18366*r^6*s^13+26532*r^5*s^13              -16676*r^4*s^13-9948*r^3*s^13+54432*r^2*s^13+52000*r*s^13              +10368*s^13+15*r^12*s^12+228*r^11*s^12+1486*r^10*s^12              +3738*r^9*s^12-5679*r^8*s^12-49344*r^7*s^12-48408*r^6*s^12              +145350*r^5*s^12+277210*r^4*s^12+20916*r^3*s^12-250344*r^2*s^12              -164864*r*s^12-25920*s^12-20*r^13*s^11-300*r^12*s^11              -1992*r^11*s^11-6002*r^10*s^11+930*r^9*s^11+32850*r^8*s^11              -89868*r^7*s^11-745998*r^6*s^11-1519338*r^5*s^11              -1180438*r^4*s^11+63216*r^3*s^11+577872*r^2*s^11+258720*r*s^11              +34560*s^11+15*r^14*s^10+250*r^13*s^10+1731*r^12*s^10              +6576*r^11*s^10+13972*r^10*s^10+54810*r^9*s^10+420411*r^8*s^10              +1748340*r^7*s^10+3733002*r^6*s^10+4096302*r^5*s^10              +1746995*r^4*s^10-541116*r^3*s^10-724152*r^2*s^10-201600*r*s^10              -25920*s^10-6*r^15*s^9-138*r^14*s^9-1100*r^13*s^9-5688*r^12*s^9              -24228*r^11*s^9-103478*r^10*s^9-481266*r^9*s^9-1728696*r^8*s^9              -3819780*r^7*s^9-4624038*r^6*s^9-2138778*r^5*s^9+1138388*r^4*s^9              +1651332*r^3*s^9+546624*r^2*s^9+47712*r*s^9+10368*s^9+r^16*s^8              +48*r^15*s^8+540*r^14*s^8+3958*r^13*s^8+25164*r^12*s^8              +107292*r^11*s^8+276760*r^10*s^8+373374*r^9*s^8-285393*r^8*s^8              -2988228*r^7*s^8-7722468*r^6*s^8-10625970*r^5*s^8              -8071513*r^4*s^8-3039072*r^3*s^8-354072*r^2*s^8+35840*r*s^8              -1728*s^8-8*r^16*s^7-180*r^15*s^7-1782*r^14*s^7-16538*r^13*s^7              -100482*r^12*s^7-279948*r^11*s^7+71098*r^10*s^7+3149958*r^9*s^7              +11614830*r^8*s^7+23874996*r^7*s^7+31304718*r^6*s^7              +26292966*r^5*s^7+13357694*r^4*s^7+3539628*r^3*s^7              +288144*r^2*s^7-26656*r*s^7+28*r^16*s^6+420*r^15*s^6              +5256*r^14*s^6+52510*r^13*s^6+264915*r^12*s^6+480144*r^11*s^6              -1229195*r^10*s^6-9214224*r^9*s^6-25263900*r^8*s^6              -41037432*r^7*s^6-42810066*r^6*s^6-28656486*r^5*s^6              -11666965*r^4*s^6-2521572*r^3*s^6-191592*r^2*s^6+5120*r*s^6              -56*r^16*s^5-672*r^15*s^5-10746*r^14*s^5-103530*r^13*s^5              -457596*r^12*s^5-717258*r^11*s^5+1654472*r^10*s^5              +10654482*r^9*s^5+25113960*r^8*s^5+34743164*r^7*s^5              +30571434*r^6*s^5+17106594*r^5*s^5+5770592*r^4*s^5              +1026672*r^3*s^5+67392*r^2*s^5+70*r^16*s^4+756*r^15*s^4              +13698*r^14*s^4+124470*r^13*s^4+517278*r^12*s^4+913512*r^11*s^4              -426058*r^10*s^4-5462820*r^9*s^4-12301233*r^8*s^4              -15195844*r^7*s^4-11596590*r^6*s^4-5489502*r^5*s^4              -1515205*r^4*s^4-207636*r^3*s^4-9024*r^2*s^4-56*r^16*s^3              -588*r^15*s^3-10530*r^14*s^3-89898*r^13*s^3-367494*r^12*s^3              -773988*r^11*s^3-672688*r^10*s^3+552108*r^9*s^3+2216952*r^8*s^3              +2788676*r^7*s^3+1933938*r^6*s^3+773790*r^5*s^3+163238*r^4*s^3              +13260*r^3*s^3+28*r^16*s^2+300*r^15*s^2+4617*r^14*s^2              +36448*r^13*s^2+148962*r^12*s^2+357312*r^11*s^2+535566*r^10*s^2              +506856*r^9*s^2+287916*r^8*s^2+79972*r^7*s^2-351*r^6*s^2              -3624*r^5*s^2+1054*r^4*s^2+528*r^3*s^2-8*r^16*s-90*r^15*s              -996*r^14*s-6770*r^13*s-27000*r^12*s-68436*r^11*s-116760*r^10*s              -138132*r^9*s-114120*r^8*s-64850*r^7*s-24228*r^6*s-5370*r^5*s              -536*r^4*s+r^16+12*r^15+66*r^14+220*r^13+495*r^12+792*r^11              +924*r^10+792*r^9+495*r^8+220*r^7+66*r^6+12*r^5+r^4)/864
            B2 = r^4*(s-1)^6*s^7*(s-r-1)*(s^2-r^2*s-2*r*s-s+r^2+r)/4
            I2, I4, I6, I10 = [-24*B1/A1*t^2, -12*A*t^4, (96*(A/A1)*B1-36*B)*t^6, -4*A1*B2*t^10]
        # these are the invariants of our curve, they are rational numbers
        I_2, I_4, I_6, I_10 = C.igusa_clebsch_invariants()
        # we check if there are some values of r, s that give the above igusa invariants, up to multiplication by t in the weighted projective space
        I = P.ideal([I2.numerator() - I_2*I2.denominator() , I4.numerator() - I_4*I4.denominator(), I6.numerator() - I_6*I6.denominator(), I10.numerator() - I_10*I10.denominator()])
        # first we check if there are r and s in Qbar that give the right Igusa invariants
        if int(magma(I).VarietySizeOverAlgebraicClosure()) > 0:
            print('Found (',n,', ',n, ') isogeny!')
            # now we compute them over a concrete number field
            Qbarm = magma.AlgebraicClosure()
            pts_over_qbar = magma(I).Variety(Qbarm)
            H.<g> = NumberField(Qbarm.AbsolutePolynomial().sage())
            pts = magma(I).Variety(H).sage()
            rr_t = pts[0][0]
            ss_t = pts[0][1]     
            tt_t = pts[0][2]
            rr = H(rr_t.list())
            ss = H(ss_t.list())
            print(H)
            print('rr = ',rr)
            print('ss = ',ss)
            assert rr.minpoly() == rr_t.minpoly()
            assert ss.minpoly() == ss_t.minpoly()
            # these are the formulas for the sum and product of the j-invariants of the quotient curves. Again, they are extracted from Kumar's files
            if n == 2:
                j1_plus_j2 = 128*(32*rr^3-16*rr^2+2*rr-36*ss*rr+ss)/ss^2
                j1_times_j2 = 4096*(12*rr+1)^3/ss^2
            if n == 3:
                j1_plus_j2 = (2*ss^9-17*ss^8+64*ss^7-324*rr*ss^6-140*ss^6+1350*rr*ss^5+196*ss^5-2097*rr*ss^4-182*ss^4  +17496*rr^2*ss^3+1368*rr*ss^3+112*ss^3-23328*rr^2*ss^2-162*rr*ss^2-44*ss^2 +9720*rr^2*ss-198*rr*ss+10*ss-314928*rr^3-432*rr^2+63*rr-1)/rr^2
                j1_times_j2 = (ss^4-4*ss^3+6*ss^2+432*rr*ss-4*ss-288*rr+1)^3/rr^3
            if n == 5:
                j1_plus_j2 =(1024*rr^9*ss^10-4608*rr^8*ss^10+9216*rr^7*ss^10-10752*rr^6*ss^10+8064*rr^5*ss^10 -4032*rr^4*ss^10+1344*rr^3*ss^10-288*rr^2*ss^10+36*rr*ss^10-2*ss^10  +28160*rr^9*ss^9-87808*rr^8*ss^9+110080*rr^7*ss^9-66304*rr^6*ss^9   +13888*rr^5*ss^9+5600*rr^4*ss^9-4256*rr^3*ss^9+1040*rr^2*ss^9-98*rr*ss^9  +ss^9+308480*rr^9*ss^8-661248*rr^8*ss^8+516992*rr^7*ss^8-163520*rr^6*ss^8   +13440*rr^5*ss^8-3920*rr^4*ss^8+4424*rr^3*ss^8-996*rr^2*ss^8+35*rr*ss^8   +1675520*rr^9*ss^7-2645568*rr^8*ss^7+1445472*rr^7*ss^7-295120*rr^6*ss^7  +9240*rr^5*ss^7+2640*rr^4*ss^7-936*rr^3*ss^7+174*rr^2*ss^7   +4453440*rr^9*ss^6-6382528*rr^8*ss^6+3109840*rr^7*ss^6-534920*rr^6*ss^6  +2200*rr^5*ss^6+6566*rr^4*ss^6-1464*rr^3*ss^6+4312352*rr^9*ss^5  -7582992*rr^8*ss^5+4972184*rr^7*ss^5-1458968*rr^6*ss^5+173796*rr^5*ss^5 -4823*rr^4*ss^5-1113360*rr^9*ss^4+1891608*rr^8*ss^4-1179920*rr^7*ss^4  +318864*rr^6*ss^4-31878*rr^5*ss^4+104720*rr^9*ss^3-157352*rr^8*ss^3  +80328*rr^7*ss^3-14280*rr^6*ss^3-4820*rr^9*ss^2+5568*rr^8*ss^2 -1692*rr^7*ss^2+110*rr^9*ss-72*rr^8*ss-rr^9)/(rr^3*(2*rr-1)*ss^6)
                j1_times_j2 =  -(16*rr^4*ss^4-32*rr^3*ss^4+24*rr^2*ss^4-8*rr*ss^4+ss^4-1824*rr^4*ss^3+1904*rr^3*ss^3  -536*rr^2*ss^3+20*rr*ss^3+1976*rr^4*ss^2-1352*rr^3*ss^2+198*rr^2*ss^2 +456*rr^4*ss-220*rr^3*ss+rr^4)^3/(rr^5*(2*rr-1)^2*ss^7)
            if n == 6:
                j1_plus_j2 =-54*(1119744*(rr+6)^5*ss^9 -31104*rr*(rr+6)^4*(rr^2+162*rr-1944)*ss^8+ 31104*rr^2*(rr+6)^3*(4*rr^3+51*rr^2-3888*rr+43740)*ss^7-7776*rr^3*(rr+6)^2*(5*rr^4-726*rr^3+9540*rr^2+36936*rr-2099520)*ss^6-2592*rr^4*(rr+6)*(31*rr^5-777*rr^4-756*rr^3+208008*rr^2-5458752*rr-42515280)*ss^5-216*rr^5*(301*rr^6+1002*rr^5-32472*rr^4-1228608*rr^3-59731344*rr^2-629226144*rr-1836660096)*ss^4-216*rr^6*(50*rr^6-8601*rr^5-256410*rr^4-3320352*rr^3-32122656*rr^2-195570288*rr-459165024)*ss^3-54*rr^8*(5*rr+54)*(143*rr^4+4248*rr^3+61776*rr^2+419904*rr+944784)*ss^2+ 6*rr^11*(5*rr+54)^2*(11*rr+162)*ss+ rr^12*(5*rr+54)^3 )/(rr^11*(6*ss+rr)^4)
                j1_times_j2 =  729*( 144*(rr+6)^2*ss^4 -288*rr*(rr+6)*(rr+114)*ss^3 + 72*rr^2*(11*rr^2+108*rr+540)*ss^2+ 24*rr^3*(rr+18)*(5*rr+54)*ss + rr^4*(5*rr+54)^2 )^3/(rr^12*(6*ss+rr)^6)
            if n == 7:
                j1_plus_j2 =  (3456*rr^10*ss^16+13824*rr^10*ss^15+1728*rr^9*ss^15+7776*rr^8*ss^15-18288*rr^10*ss^14  -63360*rr^9*ss^14-18144*rr^8*ss^14+61488*rr^7*ss^14-12600*rr^6*ss^14  -158416*rr^10*ss^13-294672*rr^9*ss^13-200088*rr^8*ss^13        +177632*rr^7*ss^13-74424*rr^6*ss^13+84*rr^5*ss^13+1890*rr^4*ss^13  -237864*rr^10*ss^12-419896*rr^9*ss^12-352968*rr^8*ss^12   +37800*rr^7*ss^12-109599*rr^6*ss^12-9352*rr^5*ss^12+12600*rr^4*ss^12  -1111*rr^3*ss^12-80*rr^2*ss^12-11808*rr^10*ss^11-110708*rr^9*ss^11   -41954*rr^8*ss^11-237988*rr^7*ss^11+286846*rr^6*ss^11-63497*rr^5*ss^11   +35609*rr^4*ss^11-5730*rr^3*ss^11-135*rr^2*ss^11+33*rr*ss^11+ss^11   +281369*rr^10*ss^10+174740*rr^9*ss^10+351252*rr^8*ss^10   +169081*rr^7*ss^10+1204756*rr^6*ss^10-233226*rr^5*ss^10   +62055*rr^4*ss^10-11846*rr^3*ss^10+270*rr^2*ss^10+102*rr*ss^10+2*ss^10  +268953*rr^10*ss^9+38296*rr^9*ss^9+48083*rr^8*ss^9+1160577*rr^7*ss^9  +1535415*rr^6*ss^9-592802*rr^5*ss^9+73584*rr^4*ss^9-13603*rr^3*ss^9     +830*rr^2*ss^9+105*rr*ss^9+ss^9+98964*rr^10*ss^8-101993*rr^9*ss^8   -542219*rr^8*ss^8+1706789*rr^7*ss^8+490476*rr^6*ss^8-1011605*rr^5*ss^8    +50624*rr^4*ss^8-10390*rr^3*ss^8+688*rr^2*ss^8+35*rr*ss^8   +23796*rr^10*ss^7-57920*rr^9*ss^7-578949*rr^8*ss^7+1489964*rr^7*ss^7 -746291*rr^6*ss^7-1087737*rr^5*ss^7+8309*rr^4*ss^7-5442*rr^3*ss^7  +174*rr^2*ss^7+11838*rr^10*ss^6-31556*rr^9*ss^6-225253*rr^8*ss^6    +871521*rr^7*ss^6-933100*rr^6*ss^6-692552*rr^5*ss^6-10626*rr^4*ss^6  -1464*rr^3*ss^6+3630*rr^10*ss^5-26368*rr^9*ss^5-5509*rr^8*ss^5   +292810*rr^7*ss^5-469259*rr^6*ss^5-234535*rr^5*ss^5-4823*rr^4*ss^5    +461*rr^10*ss^4-8502*rr^9*ss^4+22977*rr^8*ss^4+31180*rr^7*ss^4   -121800*rr^6*ss^4-31878*rr^5*ss^4-60*rr^10*ss^3-811*rr^9*ss^3   +6658*rr^8*ss^3-6744*rr^7*ss^3-14280*rr^6*ss^3-15*rr^10*ss^2    +120*rr^9*ss^2+336*rr^8*ss^2-1692*rr^7*ss^2+rr^10*ss+16*rr^9*ss-72*rr^8*ss   -rr^9) /(rr^3*ss^6*(ss+1)^3*(rr*ss+rr-1)^7)
                j1_times_j2 = (144*rr^4*ss^6-48*rr^4*ss^5+384*rr^3*ss^5+216*rr^2*ss^5-80*rr^4*ss^4+824*rr^3*ss^4  +632*rr^2*ss^4+16*rr*ss^4+ss^4+320*rr^4*ss^3+528*rr^3*ss^3+608*rr^2*ss^3 +20*rr*ss^3+200*rr^4*ss^2-136*rr^3*ss^2+198*rr^2*ss^2-8*rr^4*ss-220*rr^3*ss  +rr^4)^3/(rr^5*ss^7*(ss+1)^4*(rr*ss+rr-1)^7)
            if n == 8:
                j1_plus_j2 = 32768*(4*ss^27+60*rr*ss^26+8*ss^26+387*rr^2*ss^25+184*rr*ss^25-48*ss^25+1391*rr^3*ss^24       +2174*rr^2*ss^24-720*rr*ss^24-96*ss^24+3000*rr^4*ss^23+15134*rr^3*ss^23             -6740*rr^2*ss^23-2208*rr*ss^23+192*ss^23+3828*rr^5*ss^22+65780*rr^4*ss^22             -42852*rr^3*ss^22-24200*rr^2*ss^22+2880*rr*ss^22+384*ss^22+2480*rr^6*ss^21             +185624*rr^5*ss^21-165856*rr^4*ss^21-184968*rr^3*ss^21+33040*rr^2*ss^21             +8832*rr*ss^21-256*ss^21+144*rr^7*ss^20+346595*rr^6*ss^20             -337376*rr^5*ss^20-1125168*rr^4*ss^20+293712*rr^3*ss^20+84640*rr^2*ss^20             -3840*rr*ss^20-512*ss^20-768*rr^8*ss^19+427358*rr^7*ss^19             -106364*rr^6*ss^19-5278400*rr^5*ss^19+1987456*rr^4*ss^19             +542880*rr^3*ss^19-49088*rr^2*ss^19-11776*rr*ss^19-320*rr^9*ss^18             +339128*rr^8*ss^18+1215760*rr^7*ss^18-18053964*rr^6*ss^18             +9957952*rr^5*ss^18+2316736*rr^4*ss^18-578240*rr^3*ss^18-90496*rr^2*ss^18             +163440*rr^9*ss^17+3311916*rr^8*ss^17-43967336*rr^7*ss^17             +35594976*rr^6*ss^17+5399424*rr^5*ss^17-3898880*rr^4*ss^17             -180608*rr^3*ss^17+42736*rr^10*ss^16+4418268*rr^9*ss^16             -76012872*rr^8*ss^16+89070336*rr^7*ss^16+1828560*rr^6*ss^16             -14510080*rr^5*ss^16+1347328*rr^4*ss^16+4704*rr^11*ss^15             +3466560*rr^10*ss^15-93622456*rr^9*ss^15+155248096*rr^8*ss^15             -26157408*rr^7*ss^15-29090752*rr^6*ss^15+10639360*rr^5*ss^15             +1617952*rr^11*ss^14-82592128*rr^10*ss^14+188526048*rr^9*ss^14             -78815424*rr^8*ss^14-21061888*rr^7*ss^14+35969216*rr^6*ss^14             +418880*rr^12*ss^13-52556992*rr^11*ss^13+160847232*rr^10*ss^13             -111294400*rr^9*ss^13+38234560*rr^8*ss^13+72901760*rr^7*ss^13             +47040*rr^13*ss^12-24236156*rr^12*ss^12+100604800*rr^11*ss^12             -79703296*rr^10*ss^12+121336512*rr^9*ss^12+96260480*rr^8*ss^12             -7944552*rr^13*ss^11+52570656*rr^12*ss^11-10556672*rr^11*ss^11             +155437568*rr^10*ss^11+86613632*rr^9*ss^11-1687504*rr^14*ss^10             +27433728*rr^13*ss^10+34603104*rr^12*ss^10+119947264*rr^11*ss^10             +58505216*rr^10*ss^10-174048*rr^15*ss^9+13906688*rr^14*ss^9             +38752192*rr^13*ss^9+66470016*rr^12*ss^9+37677056*rr^11*ss^9             +5551104*rr^15*ss^8+24100608*rr^14*ss^8+33684992*rr^13*ss^8             +26533952*rr^12*ss^8+1425920*rr^16*ss^7+9608704*rr^15*ss^7             +16784896*rr^14*ss^7+15668096*rr^13*ss^7+172032*rr^17*ss^6             +1678848*rr^16*ss^6+5877760*rr^15*ss^6+5395712*rr^14*ss^6             -504832*rr^17*ss^5+145408*rr^16*ss^5-31232*rr^15*ss^5-359936*rr^18*ss^4             -1171456*rr^17*ss^4-1111040*rr^16*ss^4-64512*rr^19*ss^3-645120*rr^18*ss^3             -579584*rr^17*ss^3-122880*rr^19*ss^2-100352*rr^18*ss^2+16384*rr^20*ss             +20480*rr^19*ss+8192*rr^21+8192*rr^20) /(ss^5*(ss+2*rr)^7*(ss^2+2*ss+4*rr)^8)
                j1_times_j2 =  67108864*(4*ss^10+24*rr*ss^9-16*ss^9+55*rr^2*ss^8-96*rr*ss^8+16*ss^8+60*rr^3*ss^7                -196*rr^2*ss^7+96*rr*ss^7+28*rr^4*ss^6-120*rr^3*ss^6+220*rr^2*ss^6                +136*rr^4*ss^5+288*rr^3*ss^5+264*rr^5*ss^4+240*rr^4*ss^4+112*rr^6*ss^3                +48*rr^5*ss^3-32*rr^6*ss^2+4*rr^8)^3 /(ss^8*(ss+2*rr)^8*(ss^2+2*ss+4*rr)^8)
            if n == 10:
                j1_plus_j2 =  128*(125*ss^30-200*rr*ss^29+1700*ss^29-1830*rr^2*ss^28-990*rr*ss^28+9195*ss^28              +5528*rr^3*ss^27-25144*rr^2*ss^27+6554*rr*ss^27+28162*ss^27              +4731*rr^4*ss^26+53322*rr^3*ss^26-139992*rr^2*ss^26+70374*rr*ss^26              +76215*ss^26-35120*rr^5*ss^25+74772*rr^4*ss^25+169554*rr^3*ss^25              -424026*rr^2*ss^25+253772*rr*ss^25+239148*ss^25+19948*rr^6*ss^24              -340588*rr^5*ss^24+476993*rr^4*ss^24+57410*rr^3*ss^24-869956*rr^2*ss^24              +474222*rr*ss^24+581301*ss^24+82512*rr^7*ss^23+101808*rr^6*ss^23              -1230760*rr^5*ss^23+1704920*rr^4*ss^23-779752*rr^3*ss^23              -1571472*rr^2*ss^23+590394*rr*ss^23+764730*ss^23-111832*rr^8*ss^22              +773244*rr^7*ss^22-313696*rr^6*ss^22-1947856*rr^5*ss^22              +4021763*rr^4*ss^22-1305122*rr^3*ss^22-2292024*rr^2*ss^22+926802*rr*ss^22              +306396*ss^22-54768*rr^9*ss^21-753332*rr^8*ss^21+2913768*rr^7*ss^21              -3911736*rr^6*ss^21-2102716*rr^5*ss^21+6397188*rr^4*ss^21              +617554*rr^3*ss^21-927426*rr^2*ss^21+1707192*rr*ss^21-352620*ss^21              +181812*rr^10*ss^20-654456*rr^9*ss^20-894466*rr^8*ss^20              +6318224*rr^7*ss^20-13778068*rr^6*ss^20-8661468*rr^5*ss^20              +3983539*rr^4*ss^20+2483222*rr^3*ss^20+3899322*rr^2*ss^20              +1840536*rr*ss^20-399600*ss^20-54768*rr^11*ss^19+1215672*rr^10*ss^19              -3440532*rr^9*ss^19+5799660*rr^8*ss^19+13329924*rr^7*ss^19              -24268044*rr^6*ss^19-29142056*rr^5*ss^19-10367976*rr^4*ss^19              -518020*rr^3*ss^19+7665732*rr^2*ss^19+814320*rr*ss^19-108000*ss^19              -111832*rr^12*ss^18+35232*rr^11*ss^18+2215120*rr^10*ss^18              -10846100*rr^9*ss^18+24631238*rr^8*ss^18+35923508*rr^7*ss^18              -17813424*rr^6*ss^18-46823720*rr^5*ss^18-31090170*rr^4*ss^18              -4258656*rr^3*ss^18+5758992*rr^2*ss^18+64800*rr*ss^18+82512*rr^13*ss^17              -903564*rr^12*ss^17+2554956*rr^11*ss^17-2653900*rr^10*ss^17              -24631172*rr^9*ss^17+43373844*rr^8*ss^17+76335288*rr^7*ss^17              +12669048*rr^6*ss^17-37814820*rr^5*ss^17-36649656*rr^4*ss^17              -3058416*rr^3*ss^17+1635120*rr^2*ss^17+19948*rr^14*ss^16              +261612*rr^13*ss^16-2618798*rr^12*ss^16+11538116*rr^11*ss^16              -16309556*rr^10*ss^16-45187744*rr^9*ss^16+42506602*rr^8*ss^16              +100553096*rr^7*ss^16+42234128*rr^6*ss^16-15685488*rr^5*ss^16              -21139704*rr^4*ss^16-628992*rr^3*ss^16-35120*rr^15*ss^15              +347936*rr^14*ss^15-1080584*rr^13*ss^15-2614264*rr^12*ss^15              +26018868*rr^11*ss^15-26254652*rr^10*ss^15-64603860*rr^9*ss^15              +25717228*rr^8*ss^15+82270988*rr^7*ss^15+42498764*rr^6*ss^15              -4311120*rr^5*ss^15-4829904*rr^4*ss^15+4731*rr^16*ss^14              -166428*rr^15*ss^14+1663072*rr^14*ss^14-7265280*rr^13*ss^14              +1387886*rr^12*ss^14+39760592*rr^11*ss^14-18760944*rr^10*ss^14              -62607284*rr^9*ss^14+10838250*rr^8*ss^14+45905848*rr^7*ss^14              +21118616*rr^6*ss^14-1185408*rr^5*ss^14+5528*rr^17*ss^13              -61776*rr^16*ss^13+156840*rr^15*ss^13+3351400*rr^14*ss^13              -17863028*rr^13*ss^13+2104852*rr^12*ss^13+46006108*rr^11*ss^13              -1381580*rr^10*ss^13-35638500*rr^9*ss^13+3730456*rr^8*ss^13              +18474752*rr^7*ss^13+4338176*rr^6*ss^13-1830*rr^18*ss^12              +43222*rr^17*ss^12-538937*rr^16*ss^12+2595392*rr^15*ss^12              +3693812*rr^14*ss^12-27090980*rr^13*ss^12-8287090*rr^12*ss^12              +35603140*rr^11*ss^12+8522344*rr^10*ss^12-10160624*rr^9*ss^12              +1733856*rr^8*ss^12+3906816*rr^7*ss^12-200*rr^19*ss^11+1328*rr^18*ss^11              +33706*rr^17*ss^11-1507582*rr^16*ss^11+7405356*rr^15*ss^11              +5407324*rr^14*ss^11-27938568*rr^13*ss^11-18965320*rr^12*ss^11              +13694900*rr^11*ss^11+6814028*rr^10*ss^11-1016464*rr^9*ss^11              +824784*rr^8*ss^11+125*rr^20*ss^10-4170*rr^19*ss^10+79368*rr^18*ss^10              -483202*rr^17*ss^10-2411981*rr^16*ss^10+10914828*rr^15*ss^10              +10670800*rr^14*ss^10-17083880*rr^13*ss^10-16258070*rr^12*ss^10              +796840*rr^11*ss^10+2078824*rr^10*ss^10+83648*rr^9*ss^10+600*rr^20*ss^9              -9774*rr^19*ss^9+330230*rr^18*ss^9-1667992*rr^17*ss^9-3550032*rr^16*ss^9              +9197464*rr^15*ss^9+12323960*rr^14*ss^9-3898220*rr^13*ss^9              -6647640*rr^12*ss^9-699328*rr^11*ss^9+263808*rr^10*ss^9-3395*rr^20*ss^8              +36650*rr^19*ss^8+688536*rr^18*ss^8-2270414*rr^17*ss^8-4713135*rr^16*ss^8              +3614600*rr^15*ss^8+7303000*rr^14*ss^8+1069520*rr^13*ss^8              -1143072*rr^12*ss^8-200448*rr^11*ss^8-29136*rr^20*ss^7+163716*rr^19*ss^7              +970620*rr^18*ss^7-1364790*rr^17*ss^7-3817206*rr^16*ss^7              -348988*rr^15*ss^7+2005300*rr^14*ss^7+677200*rr^13*ss^7-16048*rr^12*ss^7              -77217*rr^20*ss^6+195090*rr^19*ss^6+951048*rr^18*ss^6-115342*rr^17*ss^6              -1551126*rr^16*ss^6-727160*rr^15*ss^6+113064*rr^14*ss^6+61824*rr^13*ss^6              -96264*rr^20*ss^5+50946*rr^19*ss^5+518814*rr^18*ss^5+291004*rr^17*ss^5              -197148*rr^16*ss^5-141760*rr^15*ss^5-11712*rr^14*ss^5-60081*rr^20*ss^4              -35562*rr^19*ss^4+112950*rr^18*ss^4+96504*rr^17*ss^4+5424*rr^16*ss^4              -5376*rr^15*ss^4-19200*rr^20*ss^3-19200*rr^19*ss^3+7408*rr^18*ss^3              +8864*rr^17*ss^3+912*rr^16*ss^3-3168*rr^20*ss^2-2952*rr^19*ss^2              +72*rr^18*ss^2+288*rr^17*ss^2-256*rr^20*ss-144*rr^19*ss+16*rr^18*ss-8*rr^20)  /(ss^9*(ss+2)*(ss-rr)^8*(ss+rr)^2*(ss+rr+2)^10)
                j1_times_j2 = 4096*(25*ss^12-60*rr*ss^11+60*ss^11+4*rr^2*ss^10-8*rr*ss^10+54*ss^10+60*rr^3*ss^9              -100*rr^2*ss^9+540*rr*ss^9+180*ss^9-42*rr^4*ss^8-184*rr^3*ss^8-280*rr^2*ss^8              +816*rr*ss^8+225*ss^8+60*rr^5*ss^7+132*rr^4*ss^7-1332*rr^3*ss^7              -180*rr^2*ss^7+360*rr*ss^7+4*rr^6*ss^6+520*rr^5*ss^6+500*rr^4*ss^6              -1864*rr^3*ss^6-84*rr^2*ss^6-60*rr^7*ss^5-108*rr^6*ss^5+1460*rr^5*ss^5              +92*rr^4*ss^5-840*rr^3*ss^5+25*rr^8*ss^4-264*rr^7*ss^4-152*rr^6*ss^4              +1536*rr^5*ss^4-122*rr^4*ss^4+80*rr^8*ss^3-412*rr^7*ss^3+276*rr^6*ss^3              +472*rr^5*ss^3+6*rr^8*ss^2-232*rr^7*ss^2+236*rr^6*ss^2-112*rr^8*ss+8*rr^7*ss              +rr^8)^3  /(ss^10*(ss+2)^2*(ss-rr)^10*(ss+rr)^4*(ss+rr+2)^10)
            if n == 11:
                j1_plus_j2 =  -rr*(rr^18*ss^27+57*rr^17*ss^27+1425*rr^16*ss^27+20539*rr^15*ss^27+188613*rr^14*ss^27              +1149633*rr^13*ss^27+4681638*rr^12*ss^27+12363186*rr^11*ss^27              +18949479*rr^10*ss^27+9020877*rr^9*ss^27-21342339*rr^8*ss^27              -39435507*rr^7*ss^27-15952077*rr^6*ss^27+16969185*rr^5*ss^27              +17076972*rr^4*ss^27+1365150*rr^3*ss^27-2739648*rr^2*ss^27              -576384*rr*ss^27+28672*ss^27-10*rr^19*ss^26-532*rr^18*ss^26              -12586*rr^17*ss^26-175239*rr^16*ss^26-1599899*rr^15*ss^26              -10072487*rr^14*ss^26-44523110*rr^13*ss^26-136632662*rr^12*ss^26              -274986457*rr^11*ss^26-296969393*rr^10*ss^26+32515011*rr^9*ss^26              +568807302*rr^8*ss^26+665886332*rr^7*ss^26+108467136*rr^6*ss^26              -365935847*rr^5*ss^26-260603621*rr^4*ss^26-5519626*rr^3*ss^26              +41499816*rr^2*ss^26+8310272*rr*ss^26-253440*ss^26+45*rr^20*ss^25              +2239*rr^19*ss^25+50304*rr^18*ss^25+678746*rr^17*ss^25              +6158685*rr^16*ss^25+39731529*rr^15*ss^25+186864500*rr^14*ss^25              +641100887*rr^13*ss^25+1557135547*rr^12*ss^25+2434687825*rr^11*ss^25              +1624457367*rr^10*ss^25-2020226478*rr^9*ss^25-5799134816*rr^8*ss^25              -4775952407*rr^7*ss^25+422154925*rr^6*ss^25+3331887949*rr^5*ss^25              +1842902115*rr^4*ss^25-44293922*rr^3*ss^25-290193712*rr^2*ss^25              -56512960*rr*ss^25+711168*ss^25-120*rr^21*ss^24-5616*rr^20*ss^24              -120638*rr^19*ss^24-1585531*rr^18*ss^24-14302366*rr^17*ss^24              -93857915*rr^16*ss^24-461626137*rr^15*ss^24-1717731122*rr^14*ss^24              -4774571993*rr^13*ss^24-9426629753*rr^12*ss^24-11279813281*rr^11*ss^24              -2047979097*rr^10*ss^24+18906813676*rr^9*ss^24+32672781834*rr^8*ss^24              +19296495484*rr^7*ss^24-7962849808*rr^6*ss^24-17821967975*rr^5*ss^24              -8135963144*rr^4*ss^24+437389142*rr^3*ss^24+1241062344*rr^2*ss^24              +239196736*rr*ss^24+807936*ss^24+210*rr^22*ss^23+9354*rr^21*ss^23              +194350*rr^20*ss^23+2507916*rr^19*ss^23+22527646*rr^18*ss^23              +149406646*rr^17*ss^23+756113915*rr^16*ss^23+2968261453*rr^15*ss^23              +9044440562*rr^14*ss^23+20894427108*rr^13*ss^23+33863751234*rr^12*ss^23              +28666008605*rr^11*ss^23-18613911780*rr^10*ss^23-92627427741*rr^9*ss^23              -118254391534*rr^8*ss^23-48261311453*rr^7*ss^23+45066132596*rr^6*ss^23              +64296080221*rr^5*ss^23+25498629485*rr^4*ss^23-1632705993*rr^3*ss^23              -3618433936*rr^2*ss^23-700862592*rr*ss^23-12051456*ss^23-252*rr^23*ss^22              -10920*rr^22*ss^22-223532*rr^21*ss^22-2866286*rr^20*ss^22              -25745436*rr^19*ss^22-171731219*rr^18*ss^22-880527174*rr^17*ss^22              -3544670961*rr^16*ss^22-11330653035*rr^15*ss^22-28706271489*rr^14*ss^22              -55825843806*rr^13*ss^22-73720672839*rr^12*ss^22              -31650360223*rr^11*ss^22+114025305479*rr^10*ss^22              +290227933352*rr^9*ss^22+299459840350*rr^8*ss^22+75800984352*rr^7*ss^22              -151517285426*rr^6*ss^22-168569807823*rr^5*ss^22-61020354585*rr^4*ss^22              +3175426217*rr^3*ss^22+7574985792*rr^2*ss^22+1497450880*rr*ss^22              +43439616*ss^22+210*rr^24*ss^21+9198*rr^23*ss^21+190708*rr^22*ss^21              +2473240*rr^21*ss^21+22402268*rr^20*ss^21+150102106*rr^19*ss^21              +769414960*rr^18*ss^21+3081914024*rr^17*ss^21+9793558646*rr^16*ss^21              +25030646492*rr^15*ss^21+51957659884*rr^14*ss^21              +85086017806*rr^13*ss^21+88585984459*rr^12*ss^21              -26868721618*rr^11*ss^21-326546116333*rr^10*ss^21              -635108825950*rr^9*ss^21-567409092845*rr^8*ss^21-72311206490*rr^7*ss^21              +348038775554*rr^6*ss^21+335340701232*rr^5*ss^21              +116243855063*rr^4*ss^21-2297045960*rr^3*ss^21-11651454768*rr^2*ss^21              -2395904704*rr*ss^21-93913600*ss^21-120*rr^25*ss^20-5664*rr^24*ss^20              -123764*rr^23*ss^20-1664846*rr^22*ss^20-15436720*rr^21*ss^20              -104457810*rr^20*ss^20-531606064*rr^19*ss^20-2060578053*rr^18*ss^20              -6071699398*rr^17*ss^20-13407675959*rr^16*ss^20-22008321971*rr^15*ss^20              -29215814064*rr^14*ss^20-39104759952*rr^13*ss^20              -30922150604*rr^12*ss^20+125851840708*rr^11*ss^20              +569875230943*rr^10*ss^20+1029534807994*rr^9*ss^20              +870616675669*rr^8*ss^20+57663450980*rr^7*ss^20-572421221156*rr^6*ss^20              -517289212652*rr^5*ss^20-179290291769*rr^4*ss^20-4531392432*rr^3*ss^20              +13189303488*rr^2*ss^20+2903238976*rr*ss^20+140304384*ss^20              +45*rr^26*ss^19+2541*rr^25*ss^19+61873*rr^24*ss^19+894391*rr^23*ss^19              +8694371*rr^22*ss^19+60348335*rr^21*ss^19+306835286*rr^20*ss^19              +1136649656*rr^19*ss^19+2881653855*rr^18*ss^19+3641134941*rr^17*ss^19              -5835410801*rr^16*ss^19-42493647164*rr^15*ss^19              -102318591348*rr^14*ss^19-114152807600*rr^13*ss^19              -26378955665*rr^12*ss^19-69747571646*rr^11*ss^19              -610715495916*rr^10*ss^19-1321322596198*rr^9*ss^19              -1204818651362*rr^8*ss^19-156463709327*rr^7*ss^19              +669156412383*rr^6*ss^19+620072454912*rr^5*ss^19              +223095879605*rr^4*ss^19+16434864867*rr^3*ss^19-10723886328*rr^2*ss^19              -2662188672*rr*ss^19-152266752*ss^19-10*rr^27*ss^18-804*rr^26*ss^18              -23690*rr^25*ss^18-386811*rr^24*ss^18-4082611*rr^23*ss^18              -29882921*rr^22*ss^18-155525850*rr^21*ss^18-562130986*rr^20*ss^18              -1202142293*rr^19*ss^18+215905013*rr^18*ss^18+13909722321*rr^17*ss^18              +65218874491*rr^16*ss^18+181316485288*rr^15*ss^18              +312056051974*rr^14*ss^18+246081994837*rr^13*ss^18              -148835407422*rr^12*ss^18-384422185858*rr^11*ss^18              +306239001838*rr^10*ss^18+1492555790243*rr^9*ss^18              +1649963878237*rr^8*ss^18+510836393952*rr^7*ss^18              -500995732503*rr^6*ss^18-565085082429*rr^5*ss^18              -219646869643*rr^4*ss^18-26130593703*rr^3*ss^18+5777287832*rr^2*ss^18              +1821984384*rr*ss^18+122220032*ss^18+rr^28*ss^17+163*rr^27*ss^17              +6692*rr^26*ss^17+132982*rr^25*ss^17+1601083*rr^24*ss^17              +12858479*rr^23*ss^17+71307152*rr^22*ss^17+265867575*rr^21*ss^17              +539868390*rr^20*ss^17-533808139*rr^19*ss^17-9414934213*rr^18*ss^17              -44301505526*rr^17*ss^17-139347575045*rr^16*ss^17              -312308112561*rr^15*ss^17-432980535957*rr^14*ss^17              -136139648177*rr^13*ss^17+700645723848*rr^12*ss^17              +1178342341961*rr^11*ss^17+147000464051*rr^10*ss^17              -1681113564273*rr^9*ss^17-2212688674791*rr^8*ss^17              -1072920395469*rr^7*ss^17+105421197592*rr^6*ss^17              +366150444468*rr^5*ss^17+165310759935*rr^4*ss^17+26476538400*rr^3*ss^17              -1457372040*rr^2*ss^17-900392768*rr*ss^17-72534528*ss^17-16*rr^28*ss^16              -1262*rr^27*ss^16-34711*rr^26*ss^16-512674*rr^25*ss^16              -4761019*rr^24*ss^16-29552961*rr^23*ss^16-121597579*rr^22*ss^16              -281330201*rr^21*ss^16+106857059*rr^20*ss^16+3965011606*rr^19*ss^16              +19185835922*rr^18*ss^16+61953207716*rr^17*ss^16              +159719171342*rr^16*ss^16+312281379659*rr^15*ss^16              +325165704063*rr^14*ss^16-247343613875*rr^13*ss^16              -1398493998024*rr^12*ss^16-1852214269241*rr^11*ss^16              -366261097610*rr^10*ss^16+1928531535125*rr^9*ss^16              +2651382311377*rr^8*ss^16+1537364426832*rr^7*ss^16              +292260515336*rr^6*ss^16-133358516406*rr^5*ss^16-89530698363*rr^4*ss^16              -18235360040*rr^3*ss^16-507357272*rr^2*ss^16+298654912*rr*ss^16              +31319040*ss^16+120*rr^28*ss^15+6170*rr^27*ss^15+126570*rr^26*ss^15              +1462386*rr^25*ss^15+10748061*rr^24*ss^15+51758110*rr^23*ss^15              +150551977*rr^22*ss^15+119518315*rr^21*ss^15-1143089373*rr^20*ss^15              -6300470389*rr^19*ss^15-18131821920*rr^18*ss^15-40086880887*rr^17*ss^15              -90086220214*rr^16*ss^15-169119832481*rr^15*ss^15              -70546457457*rr^14*ss^15+633711287837*rr^13*ss^15              +1772453196747*rr^12*ss^15+1954230459257*rr^11*ss^15              +215668956782*rr^10*ss^15-2021127439214*rr^9*ss^15              -2614220285559*rr^8*ss^15-1585160228180*rr^7*ss^15              -468662748906*rr^6*ss^15-18265016925*rr^5*ss^15+30308970281*rr^4*ss^15              +8453200135*rr^3*ss^15+660694080*rr^2*ss^15-54274432*rr*ss^15              -9495552*ss^15-560*rr^28*ss^14-21350*rr^27*ss^14-346885*rr^26*ss^14              -3245402*rr^25*ss^14-19272210*rr^24*ss^14-72374906*rr^23*ss^14              -139434502*rr^22*ss^14+127171091*rr^21*ss^14+1692489007*rr^20*ss^14              +4549011785*rr^19*ss^14+2658464785*rr^18*ss^14-11141020241*rr^17*ss^14              -13458847914*rr^16*ss^14+18186767146*rr^15*ss^14              -100855583544*rr^14*ss^14-722660188902*rr^13*ss^14              -1580376518002*rr^12*ss^14-1488189804661*rr^11*ss^14              +64703520810*rr^10*ss^14+1726697858986*rr^9*ss^14              +2015848744228*rr^8*ss^14+1197471152124*rr^7*ss^14              +394964847007*rr^6*ss^14+59176270232*rr^5*ss^14-3054496158*rr^4*ss^14              -2472082635*rr^3*ss^14-295415216*rr^2*ss^14+452736*rr*ss^14              +1890816*ss^14+1820*rr^28*ss^13+55510*rr^27*ss^13+745472*rr^26*ss^13              +5821687*rr^25*ss^13+28681902*rr^24*ss^13+86492248*rr^23*ss^13              +112714707*rr^22*ss^13-231964933*rr^21*ss^13-1158334458*rr^20*ss^13              +427249399*rr^19*ss^13+15326316576*rr^18*ss^13+48039832645*rr^17*ss^13              +59008756008*rr^16*ss^13+13738891304*rr^15*ss^13              +73293467326*rr^14*ss^13+496456162471*rr^13*ss^13              +1021224391015*rr^12*ss^13+844279109036*rr^11*ss^13              -188922850986*rr^10*ss^13-1115942499810*rr^9*ss^13              -1167798906772*rr^8*ss^13-655218602762*rr^7*ss^13              -215501542565*rr^6*ss^13-38534232333*rr^5*ss^13-2156588586*rr^4*ss^13              +420750880*rr^3*ss^13+71802624*rr^2*ss^13+1385408*rr*ss^13-216576*ss^13              -4368*rr^28*ss^12-112294*rr^27*ss^12-1292031*rr^26*ss^12              -8700263*rr^25*ss^12-37032844*rr^24*ss^12-97032006*rr^23*ss^12              -120353884*rr^22*ss^12+68579839*rr^21*ss^12-34221388*rr^20*ss^12              -4402711572*rr^19*ss^12-20846217766*rr^18*ss^12-42473141793*rr^17*ss^12              -23418432784*rr^16*ss^12+56474518843*rr^15*ss^12              +58755666112*rr^14*ss^12-183480388509*rr^13*ss^12              -475283329685*rr^12*ss^12-373875591171*rr^11*ss^12              +122917811570*rr^10*ss^12+504628376720*rr^9*ss^12              +477727786587*rr^8*ss^12+245531325806*rr^7*ss^12+74203855594*rr^6*ss^12              +12247078117*rr^5*ss^12+665963029*rr^4*ss^12-94825816*rr^3*ss^12              -12663504*rr^2*ss^12+167872*rr*ss^12+10240*ss^12+8008*rr^28*ss^11              +180466*rr^27*ss^11+1838408*rr^26*ss^11+11067706*rr^25*ss^11              +42957989*rr^24*ss^11+109487812*rr^23*ss^11+181674771*rr^22*ss^11              +257814933*rr^21*ss^11+972148648*rr^20*ss^11+4690565276*rr^19*ss^11              +12565489634*rr^18*ss^11+10225171238*rr^17*ss^11              -36379895908*rr^16*ss^11-122678142079*rr^15*ss^11              -143641560400*rr^14*ss^11-10437017317*rr^13*ss^11              +157555173095*rr^12*ss^11+152505683267*rr^11*ss^11              -9696518862*rr^10*ss^11-127399855190*rr^9*ss^11-114304691458*rr^8*ss^11              -50418605542*rr^7*ss^11-11207666899*rr^6*ss^11-519461041*rr^5*ss^11              +325343627*rr^4*ss^11+71751279*rr^3*ss^11+4191624*rr^2*ss^11              -148480*rr*ss^11-11440*rr^28*ss^10-233090*rr^27*ss^10-2167165*rr^26*ss^10              -12102948*rr^25*ss^10-45201784*rr^24*ss^10-121292844*rr^23*ss^10              -259268610*rr^22*ss^10-534782581*rr^21*ss^10-1246655394*rr^20*ss^10              -2594680561*rr^19*ss^10-1392166002*rr^18*ss^10+15172011325*rr^17*ss^10              +62325191972*rr^16*ss^10+122211263996*rr^15*ss^10              +130873383852*rr^14*ss^10+53119710967*rr^13*ss^10              -46673642385*rr^12*ss^10-79665303092*rr^11*ss^10              -47752413781*rr^10*ss^10-13383791051*rr^9*ss^10-3719646483*rr^8*ss^10              -4372427807*rr^7*ss^10-3377989609*rr^6*ss^10-1358803095*rr^5*ss^10              -304122110*rr^4*ss^10-35902431*rr^3*ss^10-1605456*rr^2*ss^10              +18816*rr*ss^10+12870*rr^28*ss^9+243100*rr^27*ss^9+2119260*rr^26*ss^9              +11338821*rr^25*ss^9+42289906*rr^24*ss^9+121331554*rr^23*ss^9              +294042431*rr^22*ss^9+629137233*rr^21*ss^9+1084422007*rr^20*ss^9              +782561712*rr^19*ss^9-3800067857*rr^18*ss^9-19462735002*rr^17*ss^9              -48591662350*rr^16*ss^9-75032594584*rr^15*ss^9-69329910832*rr^14*ss^9              -24021910969*rr^13*ss^9+28970268837*rr^12*ss^9+54035101472*rr^11*ss^9              +48746508175*rr^10*ss^9+32207578494*rr^9*ss^9+17695847237*rr^8*ss^9              +8088850161*rr^7*ss^9+2849935065*rr^6*ss^9+708365127*rr^5*ss^9              +113070196*rr^4*ss^9+9925626*rr^3*ss^9+317800*rr^2*ss^9-11440*rr^28*ss^8              -204490*rr^27*ss^8-1709357*rr^26*ss^8-8969389*rr^25*ss^8              -33934426*rr^24*ss^8-102123068*rr^23*ss^8-259162496*rr^22*ss^8              -543852975*rr^21*ss^8-806320929*rr^20*ss^8-230271622*rr^19*ss^8              +3137841058*rr^18*ss^8+11340199876*rr^17*ss^8+22539105441*rr^16*ss^8              +28038303637*rr^15*ss^8+18405515782*rr^14*ss^8-4426065275*rr^13*ss^8              -26229015212*rr^12*ss^8-34662320741*rr^11*ss^8-29666722077*rr^10*ss^8              -19027730522*rr^9*ss^8-9518313273*rr^8*ss^8-3678947994*rr^7*ss^8              -1055043902*rr^6*ss^8-210471655*rr^5*ss^8-26317201*rr^4*ss^8              -1657334*rr^3*ss^8-23520*rr^2*ss^8+8008*rr^28*ss^7+137774*rr^27*ss^7              +1123486*rr^26*ss^7+5861170*rr^25*ss^7+22503499*rr^24*ss^7              +69334578*rr^23*ss^7+177525817*rr^22*ss^7+366126215*rr^21*ss^7              +536398249*rr^20*ss^7+302366901*rr^19*ss^7-954648222*rr^18*ss^7              -3332247137*rr^17*ss^7-5238525061*rr^16*ss^7-3657246626*rr^15*ss^7              +2929738922*rr^14*ss^7+11819294501*rr^13*ss^7+17779905469*rr^12*ss^7              +17802111613*rr^11*ss^7+13236806356*rr^10*ss^7+7571948679*rr^9*ss^7              +3343438302*rr^8*ss^7+1117338734*rr^7*ss^7+271064353*rr^6*ss^7              +44446556*rr^5*ss^7+4312854*rr^4*ss^7+179074*rr^3*ss^7-4368*rr^28*ss^6              -73346*rr^27*ss^6-590583*rr^26*ss^6-3080850*rr^25*ss^6              -11924286*rr^24*ss^6-36916018*rr^23*ss^6-93916822*rr^22*ss^6              -192930043*rr^21*ss^6-302741079*rr^20*ss^6-326159771*rr^19*ss^6              -194174125*rr^18*ss^6-120091511*rr^17*ss^6-726512733*rr^16*ss^6              -2593585752*rr^15*ss^6-5417259122*rr^14*ss^6-7826538676*rr^13*ss^6              -8415803128*rr^12*ss^6-6966740703*rr^11*ss^6-4500244166*rr^10*ss^6              -2266584953*rr^9*ss^6-877570739*rr^8*ss^6-253568508*rr^7*ss^6              -51934590*rr^6*ss^6-6885583*rr^5*ss^6-490851*rr^4*ss^6-10878*rr^3*ss^6              +1820*rr^28*ss^5+30170*rr^27*ss^5+241720*rr^26*ss^5+1261433*rr^25*ss^5              +4880556*rr^24*ss^5+14997794*rr^23*ss^5+37737973*rr^22*ss^5              +78321337*rr^21*ss^5+135438250*rr^20*ss^5+207046057*rr^19*ss^5              +325864614*rr^18*ss^5+598059851*rr^17*ss^5+1154422674*rr^16*ss^5              +1979419286*rr^15*ss^5+2782861397*rr^14*ss^5+3138650228*rr^13*ss^5              +2828259091*rr^12*ss^5+2031016579*rr^11*ss^5+1154508812*rr^10*ss^5              +512332834*rr^9*ss^5+173270788*rr^8*ss^5+42924418*rr^7*ss^5              +7285772*rr^6*ss^5+747693*rr^5*ss^5+34213*rr^4*ss^5-560*rr^28*ss^4              -9250*rr^27*ss^4-74045*rr^26*ss^4-385585*rr^25*ss^4-1480044*rr^24*ss^4              -4485214*rr^23*ss^4-11194050*rr^22*ss^4-23856939*rr^21*ss^4              -45752344*rr^20*ss^4-85001450*rr^19*ss^4-160450322*rr^18*ss^4              -297709397*rr^17*ss^4-502366235*rr^16*ss^4-725782129*rr^15*ss^4              -870133057*rr^14*ss^4-853043922*rr^13*ss^4-677624934*rr^12*ss^4              -431973178*rr^11*ss^4-218003331*rr^10*ss^4-85321720*rr^9*ss^4              -25085979*rr^8*ss^4-5265787*rr^7*ss^4-722587*rr^6*ss^4-54261*rr^5*ss^4              -1344*rr^4*ss^4+120*rr^28*ss^3+1990*rr^27*ss^3+15939*rr^26*ss^3              +82517*rr^25*ss^3+312610*rr^24*ss^3+934581*rr^23*ss^3+2344950*rr^22*ss^3              +5264704*rr^21*ss^3+11251088*rr^20*ss^3+23519280*rr^19*ss^3              +46784482*rr^18*ss^3+83916742*rr^17*ss^3+129812020*rr^16*ss^3              +168628086*rr^15*ss^3+181230440*rr^14*ss^3+159531516*rr^13*ss^3              +113900104*rr^12*ss^3+65142674*rr^11*ss^3+29325411*rr^10*ss^3              +10125645*rr^9*ss^3+2577370*rr^8*ss^3+453197*rr^7*ss^3+48794*rr^6*ss^3              +2396*rr^5*ss^3-16*rr^28*ss^2-268*rr^27*ss^2-2147*rr^26*ss^2              -11014*rr^25*ss^2-41213*rr^24*ss^2-123449*rr^23*ss^2-323665*rr^22*ss^2              -802397*rr^21*ss^2-1929550*rr^20*ss^2-4345834*rr^19*ss^2              -8694216*rr^18*ss^2-14875302*rr^17*ss^2-21327384*rr^16*ss^2              -25353396*rr^15*ss^2-24810404*rr^14*ss^2-19837924*rr^13*ss^2              -12832706*rr^12*ss^2-6620890*rr^11*ss^2-2668173*rr^10*ss^2              -813908*rr^9*ss^2-178891*rr^8*ss^2-26051*rr^7*ss^2-2131*rr^6*ss^2              -63*rr^5*ss^2+rr^28*ss+17*rr^27*ss+136*rr^26*ss+693*rr^25*ss+2631*rr^24*ss              +8519*rr^23*ss+26197*rr^22*ss+77996*rr^21*ss+212194*rr^20*ss              +496978*rr^19*ss+971516*rr^18*ss+1567774*rr^17*ss+2082262*rr^16*ss              +2272934*rr^15*ss+2033438*rr^14*ss+1482604*rr^13*ss+872525*rr^12*ss              +408205*rr^11*ss+148308*rr^10*ss+40341*rr^9*ss+7731*rr^8*ss+931*rr^7*ss              +53*rr^6*ss-rr^25-19*rr^24-171*rr^23-969*rr^22-3876*rr^21-11628*rr^20              -27132*rr^19-50388*rr^18-75582*rr^17-92378*rr^16-92378*rr^15              -75582*rr^14-50388*rr^13-27132*rr^12-11628*rr^11-3876*rr^10-969*rr^9              -171*rr^8-19*rr^7-rr^6)  /(ss^3*(ss-rr-1)^2*(ss^2-rr^2*ss-2*rr*ss-ss+rr^2+rr)^11)
                j1_times_j2 =  rr^2*(rr^6*ss^10-228*rr^5*ss^10+38*rr^4*ss^10+2204*rr^3*ss^10+3553*rr^2*ss^10+2432*rr*ss^10              +1216*ss^10-4*rr^7*ss^9+678*rr^6*ss^9+1748*rr^5*ss^9-5048*rr^4*ss^9              -18440*rr^3*ss^9-18622*rr^2*ss^9-10872*rr*ss^9-5696*ss^9+6*rr^8*ss^8              -660*rr^7*ss^8-4531*rr^6*ss^8-2192*rr^5*ss^8+25870*rr^4*ss^8              +47752*rr^3*ss^8+30595*rr^2*ss^8+16760*rr*ss^8+11072*ss^8-4*rr^9*ss^7              +192*rr^8*ss^7+3628*rr^7*ss^7+11224*rr^6*ss^7-3744*rr^5*ss^7              -46748*rr^4*ss^7-46012*rr^3*ss^7-7352*rr^2*ss^7-6984*rr*ss^7-11648*ss^7              +rr^10*ss^6+24*rr^9*ss^6-830*rr^8*ss^6-7520*rr^7*ss^6-13551*rr^6*ss^6              +10028*rr^5*ss^6+35396*rr^4*ss^6+1376*rr^3*ss^6-32867*rr^2*ss^6              -9024*rr*ss^6+7232*ss^6-6*rr^10*ss^5-68*rr^9*ss^5+1232*rr^8*ss^5              +7312*rr^7*ss^5+7874*rr^6*ss^5-9160*rr^5*ss^5-9020*rr^4*ss^5              +28624*rr^3*ss^5+43090*rr^2*ss^5+13608*rr*ss^5-2624*ss^5+15*rr^10*ss^4              +120*rr^9*ss^4-650*rr^8*ss^4-2908*rr^7*ss^4-567*rr^6*ss^4+6320*rr^5*ss^4              -658*rr^4*ss^4-22004*rr^3*ss^4-25083*rr^2*ss^4-8024*rr*ss^4+448*ss^4              -20*rr^10*ss^3-140*rr^9*ss^3-176*rr^8*ss^3-452*rr^7*ss^3-2412*rr^6*ss^3              -4344*rr^5*ss^3-272*rr^4*ss^3+7192*rr^3*ss^3+7464*rr^2*ss^3+2328*rr*ss^3              +15*rr^10*ss^2+104*rr^9*ss^2+358*rr^8*ss^2+920*rr^7*ss^2+1794*rr^6*ss^2              +2112*rr^5*ss^2+942*rr^4*ss^2-560*rr^3*ss^2-757*rr^2*ss^2-224*rr*ss^2              -6*rr^10*ss-44*rr^9*ss-160*rr^8*ss-372*rr^7*ss-580*rr^6*ss-596*rr^5*ss              -384*rr^4*ss-140*rr^3*ss-22*rr^2*ss+rr^10+8*rr^9+28*rr^8+56*rr^7+70*rr^6              +56*rr^5+28*rr^4+8*rr^3+rr^2)^3  /(ss^5*(ss-rr-1)^3*(ss^2-rr^2*ss-2*rr*ss-ss+rr^2+rr)^11)
            KH.<xH> = PolynomialRing(H)
            min_pol_j = xH^2 - xH*H(j1_plus_j2) + H(j1_times_j2)
            # we compute j1 and j2
            if min_pol_j.is_irreducible():
                HH.<gHH> = NumberField(min_pol_j)
                j1, j2 = [a[0] for a in min_pol_j.roots(HH)]
            elif len(min_pol_j.roots())==1: # in this case the two j-invariants are the same
                j1 = min_pol_j.roots()[0][0]
                j2 = j1
            else:
                j1, j2 = [a[0] for a in min_pol_j.roots()]
            E1 = EllipticCurve_from_j(j1)
            E2 = EllipticCurve_from_j(j2)
            print('Curve E1 has CM?', E1.has_cm())
            if E1.has_cm():
                print('CM discriminant = ', E1.cm_discriminant())
            print('Curve E2 has CM?', E2.has_cm())
            if E2.has_cm():
                print('CM discriminant = ', E2.cm_discriminant())
            if alg == 'QxQ' or alg == 'M_2(Q)':
                print('Is E1 isogenous to E2?', E1.is_isogenous(E2))
                    
            break
    print('_____________________________________')


